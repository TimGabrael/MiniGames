// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnoMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UnoMessages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_UnoMessages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 3021010 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_UnoMessages_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UnoMessages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_UnoMessages_2eproto;
namespace uno {
class CardData;
struct CardDataDefaultTypeInternal;
extern CardDataDefaultTypeInternal _CardData_default_instance_;
class ClientPlayCard;
struct ClientPlayCardDefaultTypeInternal;
extern ClientPlayCardDefaultTypeInternal _ClientPlayCard_default_instance_;
class PullData;
struct PullDataDefaultTypeInternal;
extern PullDataDefaultTypeInternal _PullData_default_instance_;
class ServerPlayCard;
struct ServerPlayCardDefaultTypeInternal;
extern ServerPlayCardDefaultTypeInternal _ServerPlayCard_default_instance_;
class ServerPullCards;
struct ServerPullCardsDefaultTypeInternal;
extern ServerPullCardsDefaultTypeInternal _ServerPullCards_default_instance_;
class ServerResync;
struct ServerResyncDefaultTypeInternal;
extern ServerResyncDefaultTypeInternal _ServerResync_default_instance_;
}  // namespace uno
PROTOBUF_NAMESPACE_OPEN
template <>
::uno::CardData* Arena::CreateMaybeMessage<::uno::CardData>(Arena*);
template <>
::uno::ClientPlayCard* Arena::CreateMaybeMessage<::uno::ClientPlayCard>(Arena*);
template <>
::uno::PullData* Arena::CreateMaybeMessage<::uno::PullData>(Arena*);
template <>
::uno::ServerPlayCard* Arena::CreateMaybeMessage<::uno::ServerPlayCard>(Arena*);
template <>
::uno::ServerPullCards* Arena::CreateMaybeMessage<::uno::ServerPullCards>(Arena*);
template <>
::uno::ServerResync* Arena::CreateMaybeMessage<::uno::ServerResync>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace uno {

// ===================================================================


// -------------------------------------------------------------------

class CardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uno.CardData) */ {
 public:
  inline CardData() : CardData(nullptr) {}
  ~CardData() override;
  explicit PROTOBUF_CONSTEXPR CardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CardData(const CardData& from);
  CardData(CardData&& from) noexcept
    : CardData() {
    *this = ::std::move(from);
  }

  inline CardData& operator=(const CardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardData& operator=(CardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardData* internal_default_instance() {
    return reinterpret_cast<const CardData*>(
               &_CardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CardData& a, CardData& b) {
    a.Swap(&b);
  }
  inline void Swap(CardData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardData* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CardData& from) {
    CardData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uno.CardData";
  }
  protected:
  explicit CardData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaceFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // required int32 face = 1;
  bool has_face() const;
  void clear_face() ;
  ::int32_t face() const;
  void set_face(::int32_t value);
  private:
  ::int32_t _internal_face() const;
  void _internal_set_face(::int32_t value);
  public:
  // required int32 color = 2;
  bool has_color() const;
  void clear_color() ;
  ::int32_t color() const;
  void set_color(::int32_t value);
  private:
  ::int32_t _internal_color() const;
  void _internal_set_color(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:uno.CardData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t face_;
    ::int32_t color_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};// -------------------------------------------------------------------

class ClientPlayCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uno.ClientPlayCard) */ {
 public:
  inline ClientPlayCard() : ClientPlayCard(nullptr) {}
  ~ClientPlayCard() override;
  explicit PROTOBUF_CONSTEXPR ClientPlayCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPlayCard(const ClientPlayCard& from);
  ClientPlayCard(ClientPlayCard&& from) noexcept
    : ClientPlayCard() {
    *this = ::std::move(from);
  }

  inline ClientPlayCard& operator=(const ClientPlayCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPlayCard& operator=(ClientPlayCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPlayCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPlayCard* internal_default_instance() {
    return reinterpret_cast<const ClientPlayCard*>(
               &_ClientPlayCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientPlayCard& a, ClientPlayCard& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPlayCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPlayCard* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPlayCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPlayCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientPlayCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientPlayCard& from) {
    ClientPlayCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPlayCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uno.ClientPlayCard";
  }
  protected:
  explicit ClientPlayCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 1,
  };
  // required .uno.CardData card = 1;
  bool has_card() const;
  void clear_card() ;
  const ::uno::CardData& card() const;
  PROTOBUF_NODISCARD ::uno::CardData* release_card();
  ::uno::CardData* mutable_card();
  void set_allocated_card(::uno::CardData* card);
  private:
  const ::uno::CardData& _internal_card() const;
  ::uno::CardData* _internal_mutable_card();
  public:
  void unsafe_arena_set_allocated_card(
      ::uno::CardData* card);
  ::uno::CardData* unsafe_arena_release_card();
  // @@protoc_insertion_point(class_scope:uno.ClientPlayCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uno::CardData* card_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};// -------------------------------------------------------------------

class PullData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uno.PullData) */ {
 public:
  inline PullData() : PullData(nullptr) {}
  ~PullData() override;
  explicit PROTOBUF_CONSTEXPR PullData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullData(const PullData& from);
  PullData(PullData&& from) noexcept
    : PullData() {
    *this = ::std::move(from);
  }

  inline PullData& operator=(const PullData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullData& operator=(PullData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullData* internal_default_instance() {
    return reinterpret_cast<const PullData*>(
               &_PullData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PullData& a, PullData& b) {
    a.Swap(&b);
  }
  inline void Swap(PullData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullData* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PullData& from) {
    PullData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uno.PullData";
  }
  protected:
  explicit PullData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // repeated .uno.CardData cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;

  public:
  void clear_cards() ;
  ::uno::CardData* mutable_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::CardData >*
      mutable_cards();
  private:
  const ::uno::CardData& _internal_cards(int index) const;
  ::uno::CardData* _internal_add_cards();
  public:
  const ::uno::CardData& cards(int index) const;
  ::uno::CardData* add_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::CardData >&
      cards() const;
  // required int32 client_id = 1;
  bool has_client_id() const;
  void clear_client_id() ;
  ::int32_t client_id() const;
  void set_client_id(::int32_t value);
  private:
  ::int32_t _internal_client_id() const;
  void _internal_set_client_id(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:uno.PullData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::CardData > cards_;
    ::int32_t client_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};// -------------------------------------------------------------------

class ServerPullCards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uno.ServerPullCards) */ {
 public:
  inline ServerPullCards() : ServerPullCards(nullptr) {}
  ~ServerPullCards() override;
  explicit PROTOBUF_CONSTEXPR ServerPullCards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPullCards(const ServerPullCards& from);
  ServerPullCards(ServerPullCards&& from) noexcept
    : ServerPullCards() {
    *this = ::std::move(from);
  }

  inline ServerPullCards& operator=(const ServerPullCards& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPullCards& operator=(ServerPullCards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPullCards& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPullCards* internal_default_instance() {
    return reinterpret_cast<const ServerPullCards*>(
               &_ServerPullCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerPullCards& a, ServerPullCards& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPullCards* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPullCards* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPullCards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerPullCards>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerPullCards& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerPullCards& from) {
    ServerPullCards::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPullCards* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uno.ServerPullCards";
  }
  protected:
  explicit ServerPullCards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPullsFieldNumber = 2,
    kNextPlayerInTurnFieldNumber = 1,
  };
  // repeated .uno.PullData pulls = 2;
  int pulls_size() const;
  private:
  int _internal_pulls_size() const;

  public:
  void clear_pulls() ;
  ::uno::PullData* mutable_pulls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData >*
      mutable_pulls();
  private:
  const ::uno::PullData& _internal_pulls(int index) const;
  ::uno::PullData* _internal_add_pulls();
  public:
  const ::uno::PullData& pulls(int index) const;
  ::uno::PullData* add_pulls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData >&
      pulls() const;
  // required int32 next_player_in_turn = 1;
  bool has_next_player_in_turn() const;
  void clear_next_player_in_turn() ;
  ::int32_t next_player_in_turn() const;
  void set_next_player_in_turn(::int32_t value);
  private:
  ::int32_t _internal_next_player_in_turn() const;
  void _internal_set_next_player_in_turn(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:uno.ServerPullCards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData > pulls_;
    ::int32_t next_player_in_turn_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};// -------------------------------------------------------------------

class ServerPlayCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uno.ServerPlayCard) */ {
 public:
  inline ServerPlayCard() : ServerPlayCard(nullptr) {}
  ~ServerPlayCard() override;
  explicit PROTOBUF_CONSTEXPR ServerPlayCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPlayCard(const ServerPlayCard& from);
  ServerPlayCard(ServerPlayCard&& from) noexcept
    : ServerPlayCard() {
    *this = ::std::move(from);
  }

  inline ServerPlayCard& operator=(const ServerPlayCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPlayCard& operator=(ServerPlayCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPlayCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPlayCard* internal_default_instance() {
    return reinterpret_cast<const ServerPlayCard*>(
               &_ServerPlayCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerPlayCard& a, ServerPlayCard& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPlayCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPlayCard* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPlayCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerPlayCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerPlayCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerPlayCard& from) {
    ServerPlayCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPlayCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uno.ServerPlayCard";
  }
  protected:
  explicit ServerPlayCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kNextPlayerInTurnFieldNumber = 2,
  };
  // required .uno.CardData card = 3;
  bool has_card() const;
  void clear_card() ;
  const ::uno::CardData& card() const;
  PROTOBUF_NODISCARD ::uno::CardData* release_card();
  ::uno::CardData* mutable_card();
  void set_allocated_card(::uno::CardData* card);
  private:
  const ::uno::CardData& _internal_card() const;
  ::uno::CardData* _internal_mutable_card();
  public:
  void unsafe_arena_set_allocated_card(
      ::uno::CardData* card);
  ::uno::CardData* unsafe_arena_release_card();
  // required int32 client_id = 1;
  bool has_client_id() const;
  void clear_client_id() ;
  ::int32_t client_id() const;
  void set_client_id(::int32_t value);
  private:
  ::int32_t _internal_client_id() const;
  void _internal_set_client_id(::int32_t value);
  public:
  // required int32 next_player_in_turn = 2;
  bool has_next_player_in_turn() const;
  void clear_next_player_in_turn() ;
  ::int32_t next_player_in_turn() const;
  void set_next_player_in_turn(::int32_t value);
  private:
  ::int32_t _internal_next_player_in_turn() const;
  void _internal_set_next_player_in_turn(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:uno.ServerPlayCard)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uno::CardData* card_;
    ::int32_t client_id_;
    ::int32_t next_player_in_turn_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};// -------------------------------------------------------------------

class ServerResync final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uno.ServerResync) */ {
 public:
  inline ServerResync() : ServerResync(nullptr) {}
  ~ServerResync() override;
  explicit PROTOBUF_CONSTEXPR ServerResync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerResync(const ServerResync& from);
  ServerResync(ServerResync&& from) noexcept
    : ServerResync() {
    *this = ::std::move(from);
  }

  inline ServerResync& operator=(const ServerResync& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResync& operator=(ServerResync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerResync& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerResync* internal_default_instance() {
    return reinterpret_cast<const ServerResync*>(
               &_ServerResync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerResync& a, ServerResync& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResync* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResync* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerResync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerResync>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerResync& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerResync& from) {
    ServerResync::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResync* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "uno.ServerResync";
  }
  protected:
  explicit ServerResync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncFieldNumber = 1,
  };
  // repeated .uno.PullData sync = 1;
  int sync_size() const;
  private:
  int _internal_sync_size() const;

  public:
  void clear_sync() ;
  ::uno::PullData* mutable_sync(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData >*
      mutable_sync();
  private:
  const ::uno::PullData& _internal_sync(int index) const;
  ::uno::PullData* _internal_add_sync();
  public:
  const ::uno::PullData& sync(int index) const;
  ::uno::PullData* add_sync();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData >&
      sync() const;
  // @@protoc_insertion_point(class_scope:uno.ServerResync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData > sync_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CardData

// required int32 face = 1;
inline bool CardData::has_face() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CardData::clear_face() {
  _impl_.face_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CardData::_internal_face() const {
  return _impl_.face_;
}
inline ::int32_t CardData::face() const {
  // @@protoc_insertion_point(field_get:uno.CardData.face)
  return _internal_face();
}
inline void CardData::_internal_set_face(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.face_ = value;
}
inline void CardData::set_face(::int32_t value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:uno.CardData.face)
}

// required int32 color = 2;
inline bool CardData::has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CardData::clear_color() {
  _impl_.color_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CardData::_internal_color() const {
  return _impl_.color_;
}
inline ::int32_t CardData::color() const {
  // @@protoc_insertion_point(field_get:uno.CardData.color)
  return _internal_color();
}
inline void CardData::_internal_set_color(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.color_ = value;
}
inline void CardData::set_color(::int32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:uno.CardData.color)
}

// -------------------------------------------------------------------

// ClientPlayCard

// required .uno.CardData card = 1;
inline bool ClientPlayCard::has_card() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.card_ != nullptr);
  return value;
}
inline void ClientPlayCard::clear_card() {
  if (_impl_.card_ != nullptr) _impl_.card_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::uno::CardData& ClientPlayCard::_internal_card() const {
  const ::uno::CardData* p = _impl_.card_;
  return p != nullptr ? *p : reinterpret_cast<const ::uno::CardData&>(
      ::uno::_CardData_default_instance_);
}
inline const ::uno::CardData& ClientPlayCard::card() const {
  // @@protoc_insertion_point(field_get:uno.ClientPlayCard.card)
  return _internal_card();
}
inline void ClientPlayCard::unsafe_arena_set_allocated_card(
    ::uno::CardData* card) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.card_);
  }
  _impl_.card_ = card;
  if (card) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uno.ClientPlayCard.card)
}
inline ::uno::CardData* ClientPlayCard::release_card() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::uno::CardData* temp = _impl_.card_;
  _impl_.card_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uno::CardData* ClientPlayCard::unsafe_arena_release_card() {
  // @@protoc_insertion_point(field_release:uno.ClientPlayCard.card)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::uno::CardData* temp = _impl_.card_;
  _impl_.card_ = nullptr;
  return temp;
}
inline ::uno::CardData* ClientPlayCard::_internal_mutable_card() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.card_ == nullptr) {
    auto* p = CreateMaybeMessage<::uno::CardData>(GetArenaForAllocation());
    _impl_.card_ = p;
  }
  return _impl_.card_;
}
inline ::uno::CardData* ClientPlayCard::mutable_card() {
  ::uno::CardData* _msg = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:uno.ClientPlayCard.card)
  return _msg;
}
inline void ClientPlayCard::set_allocated_card(::uno::CardData* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.card_;
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(card);
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.card_ = card;
  // @@protoc_insertion_point(field_set_allocated:uno.ClientPlayCard.card)
}

// -------------------------------------------------------------------

// PullData

// required int32 client_id = 1;
inline bool PullData::has_client_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PullData::clear_client_id() {
  _impl_.client_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PullData::_internal_client_id() const {
  return _impl_.client_id_;
}
inline ::int32_t PullData::client_id() const {
  // @@protoc_insertion_point(field_get:uno.PullData.client_id)
  return _internal_client_id();
}
inline void PullData::_internal_set_client_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.client_id_ = value;
}
inline void PullData::set_client_id(::int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:uno.PullData.client_id)
}

// repeated .uno.CardData cards = 2;
inline int PullData::_internal_cards_size() const {
  return _impl_.cards_.size();
}
inline int PullData::cards_size() const {
  return _internal_cards_size();
}
inline void PullData::clear_cards() {
  _impl_.cards_.Clear();
}
inline ::uno::CardData* PullData::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:uno.PullData.cards)
  return _impl_.cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::CardData >*
PullData::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:uno.PullData.cards)
  return &_impl_.cards_;
}
inline const ::uno::CardData& PullData::_internal_cards(int index) const {
  return _impl_.cards_.Get(index);
}
inline const ::uno::CardData& PullData::cards(int index) const {
  // @@protoc_insertion_point(field_get:uno.PullData.cards)
  return _internal_cards(index);
}
inline ::uno::CardData* PullData::_internal_add_cards() {
  return _impl_.cards_.Add();
}
inline ::uno::CardData* PullData::add_cards() {
  ::uno::CardData* _add = _internal_add_cards();
  // @@protoc_insertion_point(field_add:uno.PullData.cards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::CardData >&
PullData::cards() const {
  // @@protoc_insertion_point(field_list:uno.PullData.cards)
  return _impl_.cards_;
}

// -------------------------------------------------------------------

// ServerPullCards

// required int32 next_player_in_turn = 1;
inline bool ServerPullCards::has_next_player_in_turn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerPullCards::clear_next_player_in_turn() {
  _impl_.next_player_in_turn_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ServerPullCards::_internal_next_player_in_turn() const {
  return _impl_.next_player_in_turn_;
}
inline ::int32_t ServerPullCards::next_player_in_turn() const {
  // @@protoc_insertion_point(field_get:uno.ServerPullCards.next_player_in_turn)
  return _internal_next_player_in_turn();
}
inline void ServerPullCards::_internal_set_next_player_in_turn(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.next_player_in_turn_ = value;
}
inline void ServerPullCards::set_next_player_in_turn(::int32_t value) {
  _internal_set_next_player_in_turn(value);
  // @@protoc_insertion_point(field_set:uno.ServerPullCards.next_player_in_turn)
}

// repeated .uno.PullData pulls = 2;
inline int ServerPullCards::_internal_pulls_size() const {
  return _impl_.pulls_.size();
}
inline int ServerPullCards::pulls_size() const {
  return _internal_pulls_size();
}
inline void ServerPullCards::clear_pulls() {
  _impl_.pulls_.Clear();
}
inline ::uno::PullData* ServerPullCards::mutable_pulls(int index) {
  // @@protoc_insertion_point(field_mutable:uno.ServerPullCards.pulls)
  return _impl_.pulls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData >*
ServerPullCards::mutable_pulls() {
  // @@protoc_insertion_point(field_mutable_list:uno.ServerPullCards.pulls)
  return &_impl_.pulls_;
}
inline const ::uno::PullData& ServerPullCards::_internal_pulls(int index) const {
  return _impl_.pulls_.Get(index);
}
inline const ::uno::PullData& ServerPullCards::pulls(int index) const {
  // @@protoc_insertion_point(field_get:uno.ServerPullCards.pulls)
  return _internal_pulls(index);
}
inline ::uno::PullData* ServerPullCards::_internal_add_pulls() {
  return _impl_.pulls_.Add();
}
inline ::uno::PullData* ServerPullCards::add_pulls() {
  ::uno::PullData* _add = _internal_add_pulls();
  // @@protoc_insertion_point(field_add:uno.ServerPullCards.pulls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData >&
ServerPullCards::pulls() const {
  // @@protoc_insertion_point(field_list:uno.ServerPullCards.pulls)
  return _impl_.pulls_;
}

// -------------------------------------------------------------------

// ServerPlayCard

// required int32 client_id = 1;
inline bool ServerPlayCard::has_client_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ServerPlayCard::clear_client_id() {
  _impl_.client_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ServerPlayCard::_internal_client_id() const {
  return _impl_.client_id_;
}
inline ::int32_t ServerPlayCard::client_id() const {
  // @@protoc_insertion_point(field_get:uno.ServerPlayCard.client_id)
  return _internal_client_id();
}
inline void ServerPlayCard::_internal_set_client_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.client_id_ = value;
}
inline void ServerPlayCard::set_client_id(::int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:uno.ServerPlayCard.client_id)
}

// required int32 next_player_in_turn = 2;
inline bool ServerPlayCard::has_next_player_in_turn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ServerPlayCard::clear_next_player_in_turn() {
  _impl_.next_player_in_turn_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ServerPlayCard::_internal_next_player_in_turn() const {
  return _impl_.next_player_in_turn_;
}
inline ::int32_t ServerPlayCard::next_player_in_turn() const {
  // @@protoc_insertion_point(field_get:uno.ServerPlayCard.next_player_in_turn)
  return _internal_next_player_in_turn();
}
inline void ServerPlayCard::_internal_set_next_player_in_turn(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.next_player_in_turn_ = value;
}
inline void ServerPlayCard::set_next_player_in_turn(::int32_t value) {
  _internal_set_next_player_in_turn(value);
  // @@protoc_insertion_point(field_set:uno.ServerPlayCard.next_player_in_turn)
}

// required .uno.CardData card = 3;
inline bool ServerPlayCard::has_card() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.card_ != nullptr);
  return value;
}
inline void ServerPlayCard::clear_card() {
  if (_impl_.card_ != nullptr) _impl_.card_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::uno::CardData& ServerPlayCard::_internal_card() const {
  const ::uno::CardData* p = _impl_.card_;
  return p != nullptr ? *p : reinterpret_cast<const ::uno::CardData&>(
      ::uno::_CardData_default_instance_);
}
inline const ::uno::CardData& ServerPlayCard::card() const {
  // @@protoc_insertion_point(field_get:uno.ServerPlayCard.card)
  return _internal_card();
}
inline void ServerPlayCard::unsafe_arena_set_allocated_card(
    ::uno::CardData* card) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.card_);
  }
  _impl_.card_ = card;
  if (card) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uno.ServerPlayCard.card)
}
inline ::uno::CardData* ServerPlayCard::release_card() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::uno::CardData* temp = _impl_.card_;
  _impl_.card_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uno::CardData* ServerPlayCard::unsafe_arena_release_card() {
  // @@protoc_insertion_point(field_release:uno.ServerPlayCard.card)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::uno::CardData* temp = _impl_.card_;
  _impl_.card_ = nullptr;
  return temp;
}
inline ::uno::CardData* ServerPlayCard::_internal_mutable_card() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.card_ == nullptr) {
    auto* p = CreateMaybeMessage<::uno::CardData>(GetArenaForAllocation());
    _impl_.card_ = p;
  }
  return _impl_.card_;
}
inline ::uno::CardData* ServerPlayCard::mutable_card() {
  ::uno::CardData* _msg = _internal_mutable_card();
  // @@protoc_insertion_point(field_mutable:uno.ServerPlayCard.card)
  return _msg;
}
inline void ServerPlayCard::set_allocated_card(::uno::CardData* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.card_;
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(card);
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.card_ = card;
  // @@protoc_insertion_point(field_set_allocated:uno.ServerPlayCard.card)
}

// -------------------------------------------------------------------

// ServerResync

// repeated .uno.PullData sync = 1;
inline int ServerResync::_internal_sync_size() const {
  return _impl_.sync_.size();
}
inline int ServerResync::sync_size() const {
  return _internal_sync_size();
}
inline void ServerResync::clear_sync() {
  _impl_.sync_.Clear();
}
inline ::uno::PullData* ServerResync::mutable_sync(int index) {
  // @@protoc_insertion_point(field_mutable:uno.ServerResync.sync)
  return _impl_.sync_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData >*
ServerResync::mutable_sync() {
  // @@protoc_insertion_point(field_mutable_list:uno.ServerResync.sync)
  return &_impl_.sync_;
}
inline const ::uno::PullData& ServerResync::_internal_sync(int index) const {
  return _impl_.sync_.Get(index);
}
inline const ::uno::PullData& ServerResync::sync(int index) const {
  // @@protoc_insertion_point(field_get:uno.ServerResync.sync)
  return _internal_sync(index);
}
inline ::uno::PullData* ServerResync::_internal_add_sync() {
  return _impl_.sync_.Add();
}
inline ::uno::PullData* ServerResync::add_sync() {
  ::uno::PullData* _add = _internal_add_sync();
  // @@protoc_insertion_point(field_add:uno.ServerResync.sync)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uno::PullData >&
ServerResync::sync() const {
  // @@protoc_insertion_point(field_list:uno.ServerResync.sync)
  return _impl_.sync_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace uno


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_UnoMessages_2eproto_2epb_2eh
