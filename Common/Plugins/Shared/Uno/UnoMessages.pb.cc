// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnoMessages.proto

#include "UnoMessages.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace uno {
PROTOBUF_CONSTEXPR CardData::CardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.face_)*/0
  , /*decltype(_impl_.color_)*/0} {}
struct CardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CardDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CardDataDefaultTypeInternal() {}
  union {
    CardData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CardDataDefaultTypeInternal _CardData_default_instance_;
PROTOBUF_CONSTEXPR ClientPlayCard::ClientPlayCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.card_)*/nullptr} {}
struct ClientPlayCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPlayCardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPlayCardDefaultTypeInternal() {}
  union {
    ClientPlayCard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPlayCardDefaultTypeInternal _ClientPlayCard_default_instance_;
PROTOBUF_CONSTEXPR PullData::PullData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cards_)*/{}
  , /*decltype(_impl_.client_id_)*/0} {}
struct PullDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullDataDefaultTypeInternal() {}
  union {
    PullData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullDataDefaultTypeInternal _PullData_default_instance_;
PROTOBUF_CONSTEXPR ServerPullCards::ServerPullCards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pulls_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerPullCardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPullCardsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPullCardsDefaultTypeInternal() {}
  union {
    ServerPullCards _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPullCardsDefaultTypeInternal _ServerPullCards_default_instance_;
PROTOBUF_CONSTEXPR ServerPlayCard::ServerPlayCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.card_)*/nullptr
  , /*decltype(_impl_.client_id_)*/0
  , /*decltype(_impl_.next_player_in_turn_)*/0} {}
struct ServerPlayCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPlayCardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPlayCardDefaultTypeInternal() {}
  union {
    ServerPlayCard _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPlayCardDefaultTypeInternal _ServerPlayCard_default_instance_;
}  // namespace uno
static ::_pb::Metadata file_level_metadata_UnoMessages_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_UnoMessages_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_UnoMessages_2eproto = nullptr;
const ::uint32_t TableStruct_UnoMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::uno::CardData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uno::CardData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uno::CardData, _impl_.face_),
    PROTOBUF_FIELD_OFFSET(::uno::CardData, _impl_.color_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::uno::ClientPlayCard, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uno::ClientPlayCard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uno::ClientPlayCard, _impl_.card_),
    0,
    PROTOBUF_FIELD_OFFSET(::uno::PullData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uno::PullData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uno::PullData, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::uno::PullData, _impl_.cards_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uno::ServerPullCards, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uno::ServerPullCards, _impl_.pulls_),
    PROTOBUF_FIELD_OFFSET(::uno::ServerPlayCard, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uno::ServerPlayCard, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uno::ServerPlayCard, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::uno::ServerPlayCard, _impl_.next_player_in_turn_),
    PROTOBUF_FIELD_OFFSET(::uno::ServerPlayCard, _impl_.card_),
    1,
    2,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::uno::CardData)},
        { 12, 21, -1, sizeof(::uno::ClientPlayCard)},
        { 22, 32, -1, sizeof(::uno::PullData)},
        { 34, -1, -1, sizeof(::uno::ServerPullCards)},
        { 43, 54, -1, sizeof(::uno::ServerPlayCard)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::uno::_CardData_default_instance_._instance,
    &::uno::_ClientPlayCard_default_instance_._instance,
    &::uno::_PullData_default_instance_._instance,
    &::uno::_ServerPullCards_default_instance_._instance,
    &::uno::_ServerPlayCard_default_instance_._instance,
};
const char descriptor_table_protodef_UnoMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021UnoMessages.proto\022\003uno\"\'\n\010CardData\022\014\n\004"
    "face\030\001 \002(\005\022\r\n\005color\030\002 \002(\005\"-\n\016ClientPlayC"
    "ard\022\033\n\004card\030\001 \002(\0132\r.uno.CardData\";\n\010Pull"
    "Data\022\021\n\tclient_id\030\001 \002(\005\022\034\n\005cards\030\002 \003(\0132\r"
    ".uno.CardData\"/\n\017ServerPullCards\022\034\n\005pull"
    "s\030\001 \003(\0132\r.uno.PullData\"]\n\016ServerPlayCard"
    "\022\021\n\tclient_id\030\001 \002(\005\022\033\n\023next_player_in_tu"
    "rn\030\002 \002(\005\022\033\n\004card\030\003 \002(\0132\r.uno.CardData"
};
static ::absl::once_flag descriptor_table_UnoMessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_UnoMessages_2eproto = {
    false,
    false,
    317,
    descriptor_table_protodef_UnoMessages_2eproto,
    "UnoMessages.proto",
    &descriptor_table_UnoMessages_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_UnoMessages_2eproto::offsets,
    file_level_metadata_UnoMessages_2eproto,
    file_level_enum_descriptors_UnoMessages_2eproto,
    file_level_service_descriptors_UnoMessages_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_UnoMessages_2eproto_getter() {
  return &descriptor_table_UnoMessages_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_UnoMessages_2eproto(&descriptor_table_UnoMessages_2eproto);
namespace uno {
// ===================================================================

class CardData::_Internal {
 public:
  using HasBits = decltype(std::declval<CardData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CardData, _impl_._has_bits_);
  static void set_has_face(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CardData::CardData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uno.CardData)
}
CardData::CardData(const CardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uno.CardData)
}

inline void CardData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.face_){0}
    , decltype(_impl_.color_){0}
  };
}

CardData::~CardData() {
  // @@protoc_insertion_point(destructor:uno.CardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CardData::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CardData::Clear() {
// @@protoc_insertion_point(message_clear_start:uno.CardData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.face_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.color_) -
        reinterpret_cast<char*>(&_impl_.face_)) + sizeof(_impl_.color_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 face = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_face(&has_bits);
          _impl_.face_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_color(&has_bits);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CardData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:uno.CardData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 face = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_face(), target);
  }

  // required int32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uno.CardData)
  return target;
}

::size_t CardData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:uno.CardData)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required int32 face = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_face());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 color = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());
  }

  return total_size;
}
::size_t CardData::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:uno.CardData)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 face = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_face());

    // required int32 color = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CardData::GetClassData() const { return &_class_data_; }


void CardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CardData*>(&to_msg);
  auto& from = static_cast<const CardData&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:uno.CardData)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.face_ = from._impl_.face_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CardData::CopyFrom(const CardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uno.CardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CardData::InternalSwap(CardData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardData, _impl_.color_)
      + sizeof(CardData::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(CardData, _impl_.face_)>(
          reinterpret_cast<char*>(&_impl_.face_),
          reinterpret_cast<char*>(&other->_impl_.face_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardData::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[0]);
}
// ===================================================================

class ClientPlayCard::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientPlayCard>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientPlayCard, _impl_._has_bits_);
  static const ::uno::CardData& card(const ClientPlayCard* msg);
  static void set_has_card(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::uno::CardData&
ClientPlayCard::_Internal::card(const ClientPlayCard* msg) {
  return *msg->_impl_.card_;
}
ClientPlayCard::ClientPlayCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uno.ClientPlayCard)
}
ClientPlayCard::ClientPlayCard(const ClientPlayCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPlayCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.card_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.card_ = new ::uno::CardData(*from._impl_.card_);
  }
  // @@protoc_insertion_point(copy_constructor:uno.ClientPlayCard)
}

inline void ClientPlayCard::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.card_){nullptr}
  };
}

ClientPlayCard::~ClientPlayCard() {
  // @@protoc_insertion_point(destructor:uno.ClientPlayCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPlayCard::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.card_;
}

void ClientPlayCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPlayCard::Clear() {
// @@protoc_insertion_point(message_clear_start:uno.ClientPlayCard)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_ABSL_DCHECK(_impl_.card_ != nullptr);
    _impl_.card_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPlayCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .uno.CardData card = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientPlayCard::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:uno.ClientPlayCard)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .uno.CardData card = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::card(this),
        _Internal::card(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uno.ClientPlayCard)
  return target;
}

::size_t ClientPlayCard::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:uno.ClientPlayCard)
  ::size_t total_size = 0;

  // required .uno.CardData card = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.card_);
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPlayCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPlayCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPlayCard::GetClassData() const { return &_class_data_; }


void ClientPlayCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPlayCard*>(&to_msg);
  auto& from = static_cast<const ClientPlayCard&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:uno.ClientPlayCard)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_card()->::uno::CardData::MergeFrom(
        from._internal_card());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPlayCard::CopyFrom(const ClientPlayCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uno.ClientPlayCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPlayCard::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.card_->IsInitialized()) return false;
  }
  return true;
}

void ClientPlayCard::InternalSwap(ClientPlayCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.card_, other->_impl_.card_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPlayCard::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[1]);
}
// ===================================================================

class PullData::_Internal {
 public:
  using HasBits = decltype(std::declval<PullData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PullData, _impl_._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PullData::PullData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uno.PullData)
}
PullData::PullData(const PullData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PullData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cards_){from._impl_.cards_}
    , decltype(_impl_.client_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.client_id_ = from._impl_.client_id_;
  // @@protoc_insertion_point(copy_constructor:uno.PullData)
}

inline void PullData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cards_){arena}
    , decltype(_impl_.client_id_){0}
  };
}

PullData::~PullData() {
  // @@protoc_insertion_point(destructor:uno.PullData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PullData::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cards_.~RepeatedPtrField();
}

void PullData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PullData::Clear() {
// @@protoc_insertion_point(message_clear_start:uno.PullData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cards_.Clear();
  _impl_.client_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .uno.CardData cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PullData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:uno.PullData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // repeated .uno.CardData cards = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cards_size()); i < n; i++) {
    const auto& repfield = this->_internal_cards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uno.PullData)
  return target;
}

::size_t PullData::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:uno.PullData)
  ::size_t total_size = 0;

  // required int32 client_id = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uno.CardData cards = 2;
  total_size += 1UL * this->_internal_cards_size();
  for (const auto& msg : this->_impl_.cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PullData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullData::GetClassData() const { return &_class_data_; }


void PullData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PullData*>(&to_msg);
  auto& from = static_cast<const PullData&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:uno.PullData)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cards_.MergeFrom(from._impl_.cards_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullData::CopyFrom(const PullData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uno.PullData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cards_))
    return false;
  return true;
}

void PullData::InternalSwap(PullData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cards_.InternalSwap(&other->_impl_.cards_);
  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullData::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[2]);
}
// ===================================================================

class ServerPullCards::_Internal {
 public:
};

ServerPullCards::ServerPullCards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uno.ServerPullCards)
}
ServerPullCards::ServerPullCards(const ServerPullCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPullCards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pulls_){from._impl_.pulls_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uno.ServerPullCards)
}

inline void ServerPullCards::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pulls_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerPullCards::~ServerPullCards() {
  // @@protoc_insertion_point(destructor:uno.ServerPullCards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPullCards::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pulls_.~RepeatedPtrField();
}

void ServerPullCards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPullCards::Clear() {
// @@protoc_insertion_point(message_clear_start:uno.ServerPullCards)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pulls_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPullCards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .uno.PullData pulls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pulls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerPullCards::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:uno.ServerPullCards)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .uno.PullData pulls = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pulls_size()); i < n; i++) {
    const auto& repfield = this->_internal_pulls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uno.ServerPullCards)
  return target;
}

::size_t ServerPullCards::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:uno.ServerPullCards)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uno.PullData pulls = 1;
  total_size += 1UL * this->_internal_pulls_size();
  for (const auto& msg : this->_impl_.pulls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPullCards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPullCards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPullCards::GetClassData() const { return &_class_data_; }


void ServerPullCards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPullCards*>(&to_msg);
  auto& from = static_cast<const ServerPullCards&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:uno.ServerPullCards)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pulls_.MergeFrom(from._impl_.pulls_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPullCards::CopyFrom(const ServerPullCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uno.ServerPullCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPullCards::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.pulls_))
    return false;
  return true;
}

void ServerPullCards::InternalSwap(ServerPullCards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pulls_.InternalSwap(&other->_impl_.pulls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPullCards::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[3]);
}
// ===================================================================

class ServerPlayCard::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerPlayCard>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerPlayCard, _impl_._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_next_player_in_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::uno::CardData& card(const ServerPlayCard* msg);
  static void set_has_card(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::uno::CardData&
ServerPlayCard::_Internal::card(const ServerPlayCard* msg) {
  return *msg->_impl_.card_;
}
ServerPlayCard::ServerPlayCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uno.ServerPlayCard)
}
ServerPlayCard::ServerPlayCard(const ServerPlayCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPlayCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.card_){nullptr}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.next_player_in_turn_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.card_ = new ::uno::CardData(*from._impl_.card_);
  }
  ::memcpy(&_impl_.client_id_, &from._impl_.client_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.next_player_in_turn_) -
    reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.next_player_in_turn_));
  // @@protoc_insertion_point(copy_constructor:uno.ServerPlayCard)
}

inline void ServerPlayCard::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.card_){nullptr}
    , decltype(_impl_.client_id_){0}
    , decltype(_impl_.next_player_in_turn_){0}
  };
}

ServerPlayCard::~ServerPlayCard() {
  // @@protoc_insertion_point(destructor:uno.ServerPlayCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPlayCard::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.card_;
}

void ServerPlayCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPlayCard::Clear() {
// @@protoc_insertion_point(message_clear_start:uno.ServerPlayCard)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_ABSL_DCHECK(_impl_.card_ != nullptr);
    _impl_.card_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.client_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.next_player_in_turn_) -
        reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.next_player_in_turn_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPlayCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 next_player_in_turn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_next_player_in_turn(&has_bits);
          _impl_.next_player_in_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required .uno.CardData card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerPlayCard::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:uno.ServerPlayCard)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 client_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // required int32 next_player_in_turn = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_next_player_in_turn(), target);
  }

  // required .uno.CardData card = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::card(this),
        _Internal::card(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uno.ServerPlayCard)
  return target;
}

::size_t ServerPlayCard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:uno.ServerPlayCard)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required .uno.CardData card = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.card_);
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 client_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required int32 next_player_in_turn = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_next_player_in_turn());
  }

  return total_size;
}
::size_t ServerPlayCard::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:uno.ServerPlayCard)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .uno.CardData card = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.card_);

    // required int32 client_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());

    // required int32 next_player_in_turn = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_next_player_in_turn());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPlayCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPlayCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPlayCard::GetClassData() const { return &_class_data_; }


void ServerPlayCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPlayCard*>(&to_msg);
  auto& from = static_cast<const ServerPlayCard&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:uno.ServerPlayCard)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_card()->::uno::CardData::MergeFrom(
          from._internal_card());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.client_id_ = from._impl_.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.next_player_in_turn_ = from._impl_.next_player_in_turn_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPlayCard::CopyFrom(const ServerPlayCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uno.ServerPlayCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPlayCard::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.card_->IsInitialized()) return false;
  }
  return true;
}

void ServerPlayCard::InternalSwap(ServerPlayCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerPlayCard, _impl_.next_player_in_turn_)
      + sizeof(ServerPlayCard::_impl_.next_player_in_turn_)
      - PROTOBUF_FIELD_OFFSET(ServerPlayCard, _impl_.card_)>(
          reinterpret_cast<char*>(&_impl_.card_),
          reinterpret_cast<char*>(&other->_impl_.card_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPlayCard::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace uno
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uno::CardData*
Arena::CreateMaybeMessage< ::uno::CardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uno::CardData >(arena);
}
template<> PROTOBUF_NOINLINE ::uno::ClientPlayCard*
Arena::CreateMaybeMessage< ::uno::ClientPlayCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uno::ClientPlayCard >(arena);
}
template<> PROTOBUF_NOINLINE ::uno::PullData*
Arena::CreateMaybeMessage< ::uno::PullData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uno::PullData >(arena);
}
template<> PROTOBUF_NOINLINE ::uno::ServerPullCards*
Arena::CreateMaybeMessage< ::uno::ServerPullCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uno::ServerPullCards >(arena);
}
template<> PROTOBUF_NOINLINE ::uno::ServerPlayCard*
Arena::CreateMaybeMessage< ::uno::ServerPlayCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uno::ServerPlayCard >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
