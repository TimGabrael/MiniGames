// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnoMessages.proto

#include "UnoMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Uno {
PROTOBUF_CONSTEXPR Player::Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cardsonhand_)*/{}
  , /*decltype(_impl_._cardsonhand_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
PROTOBUF_CONSTEXPR GameState::GameState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.playerinturn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topcard_)*/0u
  , /*decltype(_impl_.topcardcolorid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStateDefaultTypeInternal() {}
  union {
    GameState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStateDefaultTypeInternal _GameState_default_instance_;
PROTOBUF_CONSTEXPR SinglePullCardResponse::SinglePullCardResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cards_)*/{}
  , /*decltype(_impl_._cards_cached_byte_size_)*/{0}
  , /*decltype(_impl_.player_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SinglePullCardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SinglePullCardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SinglePullCardResponseDefaultTypeInternal() {}
  union {
    SinglePullCardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SinglePullCardResponseDefaultTypeInternal _SinglePullCardResponse_default_instance_;
PROTOBUF_CONSTEXPR PullCardResponse::PullCardResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pullresponses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PullCardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullCardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullCardResponseDefaultTypeInternal() {}
  union {
    PullCardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullCardResponseDefaultTypeInternal _PullCardResponse_default_instance_;
PROTOBUF_CONSTEXPR PlayCardRequest::PlayCardRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.card_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayCardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayCardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayCardRequestDefaultTypeInternal() {}
  union {
    PlayCardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayCardRequestDefaultTypeInternal _PlayCardRequest_default_instance_;
PROTOBUF_CONSTEXPR PlayCard::PlayCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nextplayer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.card_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayCardDefaultTypeInternal() {}
  union {
    PlayCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayCardDefaultTypeInternal _PlayCard_default_instance_;
}  // namespace Uno
static ::_pb::Metadata file_level_metadata_UnoMessages_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_UnoMessages_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_UnoMessages_2eproto = nullptr;

const uint32_t TableStruct_UnoMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Uno::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Uno::Player, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Uno::Player, _impl_.cardsonhand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Uno::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Uno::GameState, _impl_.playerinturn_),
  PROTOBUF_FIELD_OFFSET(::Uno::GameState, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::Uno::GameState, _impl_.topcard_),
  PROTOBUF_FIELD_OFFSET(::Uno::GameState, _impl_.topcardcolorid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Uno::SinglePullCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Uno::SinglePullCardResponse, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Uno::SinglePullCardResponse, _impl_.cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Uno::PullCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Uno::PullCardResponse, _impl_.pullresponses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Uno::PlayCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Uno::PlayCardRequest, _impl_.card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Uno::PlayCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Uno::PlayCard, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Uno::PlayCard, _impl_.nextplayer_),
  PROTOBUF_FIELD_OFFSET(::Uno::PlayCard, _impl_.card_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Uno::Player)},
  { 8, -1, -1, sizeof(::Uno::GameState)},
  { 18, -1, -1, sizeof(::Uno::SinglePullCardResponse)},
  { 26, -1, -1, sizeof(::Uno::PullCardResponse)},
  { 33, -1, -1, sizeof(::Uno::PlayCardRequest)},
  { 40, -1, -1, sizeof(::Uno::PlayCard)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Uno::_Player_default_instance_._instance,
  &::Uno::_GameState_default_instance_._instance,
  &::Uno::_SinglePullCardResponse_default_instance_._instance,
  &::Uno::_PullCardResponse_default_instance_._instance,
  &::Uno::_PlayCardRequest_default_instance_._instance,
  &::Uno::_PlayCard_default_instance_._instance,
};

const char descriptor_table_protodef_UnoMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021UnoMessages.proto\022\003Uno\"+\n\006Player\022\014\n\004na"
  "me\030\001 \001(\t\022\023\n\013cardsOnHand\030\002 \003(\r\"h\n\tGameSta"
  "te\022\024\n\014playerInTurn\030\001 \001(\t\022\034\n\007players\030\002 \003("
  "\0132\013.Uno.Player\022\017\n\007topCard\030\003 \001(\r\022\026\n\016topCa"
  "rdColorID\030\004 \001(\r\"7\n\026SinglePullCardRespons"
  "e\022\016\n\006player\030\001 \001(\t\022\r\n\005cards\030\002 \003(\r\"F\n\020Pull"
  "CardResponse\0222\n\rpullResponses\030\001 \003(\0132\033.Un"
  "o.SinglePullCardResponse\"\037\n\017PlayCardRequ"
  "est\022\014\n\004card\030\001 \001(\r\"<\n\010PlayCard\022\016\n\006player\030"
  "\001 \001(\t\022\022\n\nnextPlayer\030\002 \001(\t\022\014\n\004card\030\003 \001(\rb"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_UnoMessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_UnoMessages_2eproto = {
    false, false, 407, descriptor_table_protodef_UnoMessages_2eproto,
    "UnoMessages.proto",
    &descriptor_table_UnoMessages_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_UnoMessages_2eproto::offsets,
    file_level_metadata_UnoMessages_2eproto, file_level_enum_descriptors_UnoMessages_2eproto,
    file_level_service_descriptors_UnoMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_UnoMessages_2eproto_getter() {
  return &descriptor_table_UnoMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_UnoMessages_2eproto(&descriptor_table_UnoMessages_2eproto);
namespace Uno {

// ===================================================================

class Player::_Internal {
 public:
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Uno.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cardsonhand_){from._impl_.cardsonhand_}
    , /*decltype(_impl_._cardsonhand_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Uno.Player)
}

inline void Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cardsonhand_){arena}
    , /*decltype(_impl_._cardsonhand_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:Uno.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cardsonhand_.~RepeatedField();
  _impl_.name_.Destroy();
}

void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:Uno.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cardsonhand_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Uno.Player.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cardsOnHand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cardsonhand(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_cardsonhand(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uno.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Uno.Player.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated uint32 cardsOnHand = 2;
  {
    int byte_size = _impl_._cardsonhand_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_cardsonhand(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uno.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Uno.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cardsOnHand = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cardsonhand_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cardsonhand_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Uno.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cardsonhand_.MergeFrom(from._impl_.cardsonhand_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uno.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cardsonhand_.InternalSwap(&other->_impl_.cardsonhand_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[0]);
}

// ===================================================================

class GameState::_Internal {
 public:
};

GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Uno.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.playerinturn_){}
    , decltype(_impl_.topcard_){}
    , decltype(_impl_.topcardcolorid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerinturn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerinturn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerinturn().empty()) {
    _this->_impl_.playerinturn_.Set(from._internal_playerinturn(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.topcard_, &from._impl_.topcard_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.topcardcolorid_) -
    reinterpret_cast<char*>(&_impl_.topcard_)) + sizeof(_impl_.topcardcolorid_));
  // @@protoc_insertion_point(copy_constructor:Uno.GameState)
}

inline void GameState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.playerinturn_){}
    , decltype(_impl_.topcard_){0u}
    , decltype(_impl_.topcardcolorid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerinturn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerinturn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:Uno.GameState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.playerinturn_.Destroy();
}

void GameState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:Uno.GameState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.playerinturn_.ClearToEmpty();
  ::memset(&_impl_.topcard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.topcardcolorid_) -
      reinterpret_cast<char*>(&_impl_.topcard_)) + sizeof(_impl_.topcardcolorid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerInTurn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerinturn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Uno.GameState.playerInTurn"));
        } else
          goto handle_unusual;
        continue;
      // repeated .Uno.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 topCard = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.topcard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 topCardColorID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.topcardcolorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uno.GameState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerInTurn = 1;
  if (!this->_internal_playerinturn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerinturn().data(), static_cast<int>(this->_internal_playerinturn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Uno.GameState.playerInTurn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerinturn(), target);
  }

  // repeated .Uno.Player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 topCard = 3;
  if (this->_internal_topcard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_topcard(), target);
  }

  // uint32 topCardColorID = 4;
  if (this->_internal_topcardcolorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_topcardcolorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uno.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Uno.GameState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Uno.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string playerInTurn = 1;
  if (!this->_internal_playerinturn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerinturn());
  }

  // uint32 topCard = 3;
  if (this->_internal_topcard() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_topcard());
  }

  // uint32 topCardColorID = 4;
  if (this->_internal_topcardcolorid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_topcardcolorid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameState::GetClassData() const { return &_class_data_; }


void GameState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameState*>(&to_msg);
  auto& from = static_cast<const GameState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Uno.GameState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_playerinturn().empty()) {
    _this->_internal_set_playerinturn(from._internal_playerinturn());
  }
  if (from._internal_topcard() != 0) {
    _this->_internal_set_topcard(from._internal_topcard());
  }
  if (from._internal_topcardcolorid() != 0) {
    _this->_internal_set_topcardcolorid(from._internal_topcardcolorid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uno.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerinturn_, lhs_arena,
      &other->_impl_.playerinturn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, _impl_.topcardcolorid_)
      + sizeof(GameState::_impl_.topcardcolorid_)
      - PROTOBUF_FIELD_OFFSET(GameState, _impl_.topcard_)>(
          reinterpret_cast<char*>(&_impl_.topcard_),
          reinterpret_cast<char*>(&other->_impl_.topcard_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[1]);
}

// ===================================================================

class SinglePullCardResponse::_Internal {
 public:
};

SinglePullCardResponse::SinglePullCardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Uno.SinglePullCardResponse)
}
SinglePullCardResponse::SinglePullCardResponse(const SinglePullCardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SinglePullCardResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cards_){from._impl_.cards_}
    , /*decltype(_impl_._cards_cached_byte_size_)*/{0}
    , decltype(_impl_.player_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player().empty()) {
    _this->_impl_.player_.Set(from._internal_player(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Uno.SinglePullCardResponse)
}

inline void SinglePullCardResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cards_){arena}
    , /*decltype(_impl_._cards_cached_byte_size_)*/{0}
    , decltype(_impl_.player_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SinglePullCardResponse::~SinglePullCardResponse() {
  // @@protoc_insertion_point(destructor:Uno.SinglePullCardResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SinglePullCardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cards_.~RepeatedField();
  _impl_.player_.Destroy();
}

void SinglePullCardResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SinglePullCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Uno.SinglePullCardResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cards_.Clear();
  _impl_.player_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SinglePullCardResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Uno.SinglePullCardResponse.player"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SinglePullCardResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uno.SinglePullCardResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player = 1;
  if (!this->_internal_player().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Uno.SinglePullCardResponse.player");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player(), target);
  }

  // repeated uint32 cards = 2;
  {
    int byte_size = _impl_._cards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_cards(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uno.SinglePullCardResponse)
  return target;
}

size_t SinglePullCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Uno.SinglePullCardResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cards = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string player = 1;
  if (!this->_internal_player().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SinglePullCardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SinglePullCardResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SinglePullCardResponse::GetClassData() const { return &_class_data_; }


void SinglePullCardResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SinglePullCardResponse*>(&to_msg);
  auto& from = static_cast<const SinglePullCardResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Uno.SinglePullCardResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cards_.MergeFrom(from._impl_.cards_);
  if (!from._internal_player().empty()) {
    _this->_internal_set_player(from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SinglePullCardResponse::CopyFrom(const SinglePullCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uno.SinglePullCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePullCardResponse::IsInitialized() const {
  return true;
}

void SinglePullCardResponse::InternalSwap(SinglePullCardResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cards_.InternalSwap(&other->_impl_.cards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_, lhs_arena,
      &other->_impl_.player_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SinglePullCardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[2]);
}

// ===================================================================

class PullCardResponse::_Internal {
 public:
};

PullCardResponse::PullCardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Uno.PullCardResponse)
}
PullCardResponse::PullCardResponse(const PullCardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PullCardResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pullresponses_){from._impl_.pullresponses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Uno.PullCardResponse)
}

inline void PullCardResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pullresponses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PullCardResponse::~PullCardResponse() {
  // @@protoc_insertion_point(destructor:Uno.PullCardResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PullCardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pullresponses_.~RepeatedPtrField();
}

void PullCardResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PullCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Uno.PullCardResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pullresponses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullCardResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Uno.SinglePullCardResponse pullResponses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pullresponses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullCardResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uno.PullCardResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Uno.SinglePullCardResponse pullResponses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pullresponses_size()); i < n; i++) {
    const auto& repfield = this->_internal_pullresponses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uno.PullCardResponse)
  return target;
}

size_t PullCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Uno.PullCardResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Uno.SinglePullCardResponse pullResponses = 1;
  total_size += 1UL * this->_internal_pullresponses_size();
  for (const auto& msg : this->_impl_.pullresponses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullCardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PullCardResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullCardResponse::GetClassData() const { return &_class_data_; }


void PullCardResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PullCardResponse*>(&to_msg);
  auto& from = static_cast<const PullCardResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Uno.PullCardResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pullresponses_.MergeFrom(from._impl_.pullresponses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullCardResponse::CopyFrom(const PullCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uno.PullCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullCardResponse::IsInitialized() const {
  return true;
}

void PullCardResponse::InternalSwap(PullCardResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pullresponses_.InternalSwap(&other->_impl_.pullresponses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullCardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[3]);
}

// ===================================================================

class PlayCardRequest::_Internal {
 public:
};

PlayCardRequest::PlayCardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Uno.PlayCardRequest)
}
PlayCardRequest::PlayCardRequest(const PlayCardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayCardRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.card_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.card_ = from._impl_.card_;
  // @@protoc_insertion_point(copy_constructor:Uno.PlayCardRequest)
}

inline void PlayCardRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.card_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayCardRequest::~PlayCardRequest() {
  // @@protoc_insertion_point(destructor:Uno.PlayCardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayCardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayCardRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Uno.PlayCardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.card_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayCardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 card = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayCardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uno.PlayCardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card = 1;
  if (this->_internal_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_card(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uno.PlayCardRequest)
  return target;
}

size_t PlayCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Uno.PlayCardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 card = 1;
  if (this->_internal_card() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_card());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayCardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayCardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayCardRequest::GetClassData() const { return &_class_data_; }


void PlayCardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayCardRequest*>(&to_msg);
  auto& from = static_cast<const PlayCardRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Uno.PlayCardRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_card() != 0) {
    _this->_internal_set_card(from._internal_card());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayCardRequest::CopyFrom(const PlayCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uno.PlayCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayCardRequest::IsInitialized() const {
  return true;
}

void PlayCardRequest::InternalSwap(PlayCardRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.card_, other->_impl_.card_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayCardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[4]);
}

// ===================================================================

class PlayCard::_Internal {
 public:
};

PlayCard::PlayCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Uno.PlayCard)
}
PlayCard::PlayCard(const PlayCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.nextplayer_){}
    , decltype(_impl_.card_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player().empty()) {
    _this->_impl_.player_.Set(from._internal_player(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nextplayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nextplayer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nextplayer().empty()) {
    _this->_impl_.nextplayer_.Set(from._internal_nextplayer(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.card_ = from._impl_.card_;
  // @@protoc_insertion_point(copy_constructor:Uno.PlayCard)
}

inline void PlayCard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.nextplayer_){}
    , decltype(_impl_.card_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nextplayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nextplayer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayCard::~PlayCard() {
  // @@protoc_insertion_point(destructor:Uno.PlayCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_.Destroy();
  _impl_.nextplayer_.Destroy();
}

void PlayCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Uno.PlayCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_.ClearToEmpty();
  _impl_.nextplayer_.ClearToEmpty();
  _impl_.card_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Uno.PlayCard.player"));
        } else
          goto handle_unusual;
        continue;
      // string nextPlayer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nextplayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Uno.PlayCard.nextPlayer"));
        } else
          goto handle_unusual;
        continue;
      // uint32 card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uno.PlayCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player = 1;
  if (!this->_internal_player().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Uno.PlayCard.player");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player(), target);
  }

  // string nextPlayer = 2;
  if (!this->_internal_nextplayer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nextplayer().data(), static_cast<int>(this->_internal_nextplayer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Uno.PlayCard.nextPlayer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nextplayer(), target);
  }

  // uint32 card = 3;
  if (this->_internal_card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_card(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uno.PlayCard)
  return target;
}

size_t PlayCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Uno.PlayCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player = 1;
  if (!this->_internal_player().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  // string nextPlayer = 2;
  if (!this->_internal_nextplayer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nextplayer());
  }

  // uint32 card = 3;
  if (this->_internal_card() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_card());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayCard::GetClassData() const { return &_class_data_; }


void PlayCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayCard*>(&to_msg);
  auto& from = static_cast<const PlayCard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Uno.PlayCard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player().empty()) {
    _this->_internal_set_player(from._internal_player());
  }
  if (!from._internal_nextplayer().empty()) {
    _this->_internal_set_nextplayer(from._internal_nextplayer());
  }
  if (from._internal_card() != 0) {
    _this->_internal_set_card(from._internal_card());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayCard::CopyFrom(const PlayCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uno.PlayCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayCard::IsInitialized() const {
  return true;
}

void PlayCard::InternalSwap(PlayCard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_, lhs_arena,
      &other->_impl_.player_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nextplayer_, lhs_arena,
      &other->_impl_.nextplayer_, rhs_arena
  );
  swap(_impl_.card_, other->_impl_.card_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UnoMessages_2eproto_getter, &descriptor_table_UnoMessages_2eproto_once,
      file_level_metadata_UnoMessages_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Uno
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Uno::Player*
Arena::CreateMaybeMessage< ::Uno::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Uno::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::Uno::GameState*
Arena::CreateMaybeMessage< ::Uno::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Uno::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::Uno::SinglePullCardResponse*
Arena::CreateMaybeMessage< ::Uno::SinglePullCardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Uno::SinglePullCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Uno::PullCardResponse*
Arena::CreateMaybeMessage< ::Uno::PullCardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Uno::PullCardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Uno::PlayCardRequest*
Arena::CreateMaybeMessage< ::Uno::PlayCardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Uno::PlayCardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Uno::PlayCard*
Arena::CreateMaybeMessage< ::Uno::PlayCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Uno::PlayCard >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
