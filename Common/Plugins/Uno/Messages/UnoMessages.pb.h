// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnoMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UnoMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UnoMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UnoMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UnoMessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UnoMessages_2eproto;
namespace Uno {
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class PlayCard;
struct PlayCardDefaultTypeInternal;
extern PlayCardDefaultTypeInternal _PlayCard_default_instance_;
class PlayCardRequest;
struct PlayCardRequestDefaultTypeInternal;
extern PlayCardRequestDefaultTypeInternal _PlayCardRequest_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PullCardResponse;
struct PullCardResponseDefaultTypeInternal;
extern PullCardResponseDefaultTypeInternal _PullCardResponse_default_instance_;
class SinglePullCardResponse;
struct SinglePullCardResponseDefaultTypeInternal;
extern SinglePullCardResponseDefaultTypeInternal _SinglePullCardResponse_default_instance_;
}  // namespace Uno
PROTOBUF_NAMESPACE_OPEN
template<> ::Uno::GameState* Arena::CreateMaybeMessage<::Uno::GameState>(Arena*);
template<> ::Uno::PlayCard* Arena::CreateMaybeMessage<::Uno::PlayCard>(Arena*);
template<> ::Uno::PlayCardRequest* Arena::CreateMaybeMessage<::Uno::PlayCardRequest>(Arena*);
template<> ::Uno::Player* Arena::CreateMaybeMessage<::Uno::Player>(Arena*);
template<> ::Uno::PullCardResponse* Arena::CreateMaybeMessage<::Uno::PullCardResponse>(Arena*);
template<> ::Uno::SinglePullCardResponse* Arena::CreateMaybeMessage<::Uno::SinglePullCardResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Uno {

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Uno.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Uno.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsOnHandFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated uint32 cardsOnHand = 2;
  int cardsonhand_size() const;
  private:
  int _internal_cardsonhand_size() const;
  public:
  void clear_cardsonhand();
  private:
  uint32_t _internal_cardsonhand(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cardsonhand() const;
  void _internal_add_cardsonhand(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cardsonhand();
  public:
  uint32_t cardsonhand(int index) const;
  void set_cardsonhand(int index, uint32_t value);
  void add_cardsonhand(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cardsonhand() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cardsonhand();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Uno.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cardsonhand_;
    mutable std::atomic<int> _cardsonhand_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};
// -------------------------------------------------------------------

class GameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Uno.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit PROTOBUF_CONSTEXPR GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameState& from) {
    GameState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Uno.GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kPlayerInTurnFieldNumber = 1,
    kTopCardFieldNumber = 3,
    kTopCardColorIDFieldNumber = 4,
  };
  // repeated .Uno.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Uno::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::Player >*
      mutable_players();
  private:
  const ::Uno::Player& _internal_players(int index) const;
  ::Uno::Player* _internal_add_players();
  public:
  const ::Uno::Player& players(int index) const;
  ::Uno::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::Player >&
      players() const;

  // string playerInTurn = 1;
  void clear_playerinturn();
  const std::string& playerinturn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerinturn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerinturn();
  PROTOBUF_NODISCARD std::string* release_playerinturn();
  void set_allocated_playerinturn(std::string* playerinturn);
  private:
  const std::string& _internal_playerinturn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerinturn(const std::string& value);
  std::string* _internal_mutable_playerinturn();
  public:

  // uint32 topCard = 3;
  void clear_topcard();
  uint32_t topcard() const;
  void set_topcard(uint32_t value);
  private:
  uint32_t _internal_topcard() const;
  void _internal_set_topcard(uint32_t value);
  public:

  // uint32 topCardColorID = 4;
  void clear_topcardcolorid();
  uint32_t topcardcolorid() const;
  void set_topcardcolorid(uint32_t value);
  private:
  uint32_t _internal_topcardcolorid() const;
  void _internal_set_topcardcolorid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Uno.GameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::Player > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerinturn_;
    uint32_t topcard_;
    uint32_t topcardcolorid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};
// -------------------------------------------------------------------

class SinglePullCardResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Uno.SinglePullCardResponse) */ {
 public:
  inline SinglePullCardResponse() : SinglePullCardResponse(nullptr) {}
  ~SinglePullCardResponse() override;
  explicit PROTOBUF_CONSTEXPR SinglePullCardResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SinglePullCardResponse(const SinglePullCardResponse& from);
  SinglePullCardResponse(SinglePullCardResponse&& from) noexcept
    : SinglePullCardResponse() {
    *this = ::std::move(from);
  }

  inline SinglePullCardResponse& operator=(const SinglePullCardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SinglePullCardResponse& operator=(SinglePullCardResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SinglePullCardResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SinglePullCardResponse* internal_default_instance() {
    return reinterpret_cast<const SinglePullCardResponse*>(
               &_SinglePullCardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SinglePullCardResponse& a, SinglePullCardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SinglePullCardResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SinglePullCardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SinglePullCardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SinglePullCardResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SinglePullCardResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SinglePullCardResponse& from) {
    SinglePullCardResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SinglePullCardResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Uno.SinglePullCardResponse";
  }
  protected:
  explicit SinglePullCardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardsFieldNumber = 2,
    kPlayerFieldNumber = 1,
  };
  // repeated uint32 cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;
  public:
  void clear_cards();
  private:
  uint32_t _internal_cards(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cards() const;
  void _internal_add_cards(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cards();
  public:
  uint32_t cards(int index) const;
  void set_cards(int index, uint32_t value);
  void add_cards(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cards();

  // string player = 1;
  void clear_player();
  const std::string& player() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player();
  PROTOBUF_NODISCARD std::string* release_player();
  void set_allocated_player(std::string* player);
  private:
  const std::string& _internal_player() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player(const std::string& value);
  std::string* _internal_mutable_player();
  public:

  // @@protoc_insertion_point(class_scope:Uno.SinglePullCardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cards_;
    mutable std::atomic<int> _cards_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};
// -------------------------------------------------------------------

class PullCardResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Uno.PullCardResponse) */ {
 public:
  inline PullCardResponse() : PullCardResponse(nullptr) {}
  ~PullCardResponse() override;
  explicit PROTOBUF_CONSTEXPR PullCardResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullCardResponse(const PullCardResponse& from);
  PullCardResponse(PullCardResponse&& from) noexcept
    : PullCardResponse() {
    *this = ::std::move(from);
  }

  inline PullCardResponse& operator=(const PullCardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullCardResponse& operator=(PullCardResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullCardResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullCardResponse* internal_default_instance() {
    return reinterpret_cast<const PullCardResponse*>(
               &_PullCardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PullCardResponse& a, PullCardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullCardResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullCardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullCardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullCardResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullCardResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PullCardResponse& from) {
    PullCardResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullCardResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Uno.PullCardResponse";
  }
  protected:
  explicit PullCardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPullResponsesFieldNumber = 1,
  };
  // repeated .Uno.SinglePullCardResponse pullResponses = 1;
  int pullresponses_size() const;
  private:
  int _internal_pullresponses_size() const;
  public:
  void clear_pullresponses();
  ::Uno::SinglePullCardResponse* mutable_pullresponses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::SinglePullCardResponse >*
      mutable_pullresponses();
  private:
  const ::Uno::SinglePullCardResponse& _internal_pullresponses(int index) const;
  ::Uno::SinglePullCardResponse* _internal_add_pullresponses();
  public:
  const ::Uno::SinglePullCardResponse& pullresponses(int index) const;
  ::Uno::SinglePullCardResponse* add_pullresponses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::SinglePullCardResponse >&
      pullresponses() const;

  // @@protoc_insertion_point(class_scope:Uno.PullCardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::SinglePullCardResponse > pullresponses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};
// -------------------------------------------------------------------

class PlayCardRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Uno.PlayCardRequest) */ {
 public:
  inline PlayCardRequest() : PlayCardRequest(nullptr) {}
  ~PlayCardRequest() override;
  explicit PROTOBUF_CONSTEXPR PlayCardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayCardRequest(const PlayCardRequest& from);
  PlayCardRequest(PlayCardRequest&& from) noexcept
    : PlayCardRequest() {
    *this = ::std::move(from);
  }

  inline PlayCardRequest& operator=(const PlayCardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayCardRequest& operator=(PlayCardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayCardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayCardRequest* internal_default_instance() {
    return reinterpret_cast<const PlayCardRequest*>(
               &_PlayCardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayCardRequest& a, PlayCardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayCardRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayCardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayCardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayCardRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayCardRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayCardRequest& from) {
    PlayCardRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayCardRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Uno.PlayCardRequest";
  }
  protected:
  explicit PlayCardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 1,
  };
  // uint32 card = 1;
  void clear_card();
  uint32_t card() const;
  void set_card(uint32_t value);
  private:
  uint32_t _internal_card() const;
  void _internal_set_card(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Uno.PlayCardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t card_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};
// -------------------------------------------------------------------

class PlayCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Uno.PlayCard) */ {
 public:
  inline PlayCard() : PlayCard(nullptr) {}
  ~PlayCard() override;
  explicit PROTOBUF_CONSTEXPR PlayCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayCard(const PlayCard& from);
  PlayCard(PlayCard&& from) noexcept
    : PlayCard() {
    *this = ::std::move(from);
  }

  inline PlayCard& operator=(const PlayCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayCard& operator=(PlayCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayCard* internal_default_instance() {
    return reinterpret_cast<const PlayCard*>(
               &_PlayCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayCard& a, PlayCard& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayCard& from) {
    PlayCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Uno.PlayCard";
  }
  protected:
  explicit PlayCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kNextPlayerFieldNumber = 2,
    kCardFieldNumber = 3,
  };
  // string player = 1;
  void clear_player();
  const std::string& player() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player();
  PROTOBUF_NODISCARD std::string* release_player();
  void set_allocated_player(std::string* player);
  private:
  const std::string& _internal_player() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player(const std::string& value);
  std::string* _internal_mutable_player();
  public:

  // string nextPlayer = 2;
  void clear_nextplayer();
  const std::string& nextplayer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nextplayer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nextplayer();
  PROTOBUF_NODISCARD std::string* release_nextplayer();
  void set_allocated_nextplayer(std::string* nextplayer);
  private:
  const std::string& _internal_nextplayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nextplayer(const std::string& value);
  std::string* _internal_mutable_nextplayer();
  public:

  // uint32 card = 3;
  void clear_card();
  uint32_t card() const;
  void set_card(uint32_t value);
  private:
  uint32_t _internal_card() const;
  void _internal_set_card(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Uno.PlayCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nextplayer_;
    uint32_t card_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UnoMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// string name = 1;
inline void Player::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Uno.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Uno.Player.name)
}
inline std::string* Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Uno.Player.name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Uno.Player.name)
  return _impl_.name_.Release();
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Uno.Player.name)
}

// repeated uint32 cardsOnHand = 2;
inline int Player::_internal_cardsonhand_size() const {
  return _impl_.cardsonhand_.size();
}
inline int Player::cardsonhand_size() const {
  return _internal_cardsonhand_size();
}
inline void Player::clear_cardsonhand() {
  _impl_.cardsonhand_.Clear();
}
inline uint32_t Player::_internal_cardsonhand(int index) const {
  return _impl_.cardsonhand_.Get(index);
}
inline uint32_t Player::cardsonhand(int index) const {
  // @@protoc_insertion_point(field_get:Uno.Player.cardsOnHand)
  return _internal_cardsonhand(index);
}
inline void Player::set_cardsonhand(int index, uint32_t value) {
  _impl_.cardsonhand_.Set(index, value);
  // @@protoc_insertion_point(field_set:Uno.Player.cardsOnHand)
}
inline void Player::_internal_add_cardsonhand(uint32_t value) {
  _impl_.cardsonhand_.Add(value);
}
inline void Player::add_cardsonhand(uint32_t value) {
  _internal_add_cardsonhand(value);
  // @@protoc_insertion_point(field_add:Uno.Player.cardsOnHand)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Player::_internal_cardsonhand() const {
  return _impl_.cardsonhand_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Player::cardsonhand() const {
  // @@protoc_insertion_point(field_list:Uno.Player.cardsOnHand)
  return _internal_cardsonhand();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Player::_internal_mutable_cardsonhand() {
  return &_impl_.cardsonhand_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Player::mutable_cardsonhand() {
  // @@protoc_insertion_point(field_mutable_list:Uno.Player.cardsOnHand)
  return _internal_mutable_cardsonhand();
}

// -------------------------------------------------------------------

// GameState

// string playerInTurn = 1;
inline void GameState::clear_playerinturn() {
  _impl_.playerinturn_.ClearToEmpty();
}
inline const std::string& GameState::playerinturn() const {
  // @@protoc_insertion_point(field_get:Uno.GameState.playerInTurn)
  return _internal_playerinturn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameState::set_playerinturn(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playerinturn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Uno.GameState.playerInTurn)
}
inline std::string* GameState::mutable_playerinturn() {
  std::string* _s = _internal_mutable_playerinturn();
  // @@protoc_insertion_point(field_mutable:Uno.GameState.playerInTurn)
  return _s;
}
inline const std::string& GameState::_internal_playerinturn() const {
  return _impl_.playerinturn_.Get();
}
inline void GameState::_internal_set_playerinturn(const std::string& value) {
  
  _impl_.playerinturn_.Set(value, GetArenaForAllocation());
}
inline std::string* GameState::_internal_mutable_playerinturn() {
  
  return _impl_.playerinturn_.Mutable(GetArenaForAllocation());
}
inline std::string* GameState::release_playerinturn() {
  // @@protoc_insertion_point(field_release:Uno.GameState.playerInTurn)
  return _impl_.playerinturn_.Release();
}
inline void GameState::set_allocated_playerinturn(std::string* playerinturn) {
  if (playerinturn != nullptr) {
    
  } else {
    
  }
  _impl_.playerinturn_.SetAllocated(playerinturn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playerinturn_.IsDefault()) {
    _impl_.playerinturn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Uno.GameState.playerInTurn)
}

// repeated .Uno.Player players = 2;
inline int GameState::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int GameState::players_size() const {
  return _internal_players_size();
}
inline void GameState::clear_players() {
  _impl_.players_.Clear();
}
inline ::Uno::Player* GameState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Uno.GameState.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::Player >*
GameState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Uno.GameState.players)
  return &_impl_.players_;
}
inline const ::Uno::Player& GameState::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Uno::Player& GameState::players(int index) const {
  // @@protoc_insertion_point(field_get:Uno.GameState.players)
  return _internal_players(index);
}
inline ::Uno::Player* GameState::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Uno::Player* GameState::add_players() {
  ::Uno::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Uno.GameState.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::Player >&
GameState::players() const {
  // @@protoc_insertion_point(field_list:Uno.GameState.players)
  return _impl_.players_;
}

// uint32 topCard = 3;
inline void GameState::clear_topcard() {
  _impl_.topcard_ = 0u;
}
inline uint32_t GameState::_internal_topcard() const {
  return _impl_.topcard_;
}
inline uint32_t GameState::topcard() const {
  // @@protoc_insertion_point(field_get:Uno.GameState.topCard)
  return _internal_topcard();
}
inline void GameState::_internal_set_topcard(uint32_t value) {
  
  _impl_.topcard_ = value;
}
inline void GameState::set_topcard(uint32_t value) {
  _internal_set_topcard(value);
  // @@protoc_insertion_point(field_set:Uno.GameState.topCard)
}

// uint32 topCardColorID = 4;
inline void GameState::clear_topcardcolorid() {
  _impl_.topcardcolorid_ = 0u;
}
inline uint32_t GameState::_internal_topcardcolorid() const {
  return _impl_.topcardcolorid_;
}
inline uint32_t GameState::topcardcolorid() const {
  // @@protoc_insertion_point(field_get:Uno.GameState.topCardColorID)
  return _internal_topcardcolorid();
}
inline void GameState::_internal_set_topcardcolorid(uint32_t value) {
  
  _impl_.topcardcolorid_ = value;
}
inline void GameState::set_topcardcolorid(uint32_t value) {
  _internal_set_topcardcolorid(value);
  // @@protoc_insertion_point(field_set:Uno.GameState.topCardColorID)
}

// -------------------------------------------------------------------

// SinglePullCardResponse

// string player = 1;
inline void SinglePullCardResponse::clear_player() {
  _impl_.player_.ClearToEmpty();
}
inline const std::string& SinglePullCardResponse::player() const {
  // @@protoc_insertion_point(field_get:Uno.SinglePullCardResponse.player)
  return _internal_player();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SinglePullCardResponse::set_player(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Uno.SinglePullCardResponse.player)
}
inline std::string* SinglePullCardResponse::mutable_player() {
  std::string* _s = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Uno.SinglePullCardResponse.player)
  return _s;
}
inline const std::string& SinglePullCardResponse::_internal_player() const {
  return _impl_.player_.Get();
}
inline void SinglePullCardResponse::_internal_set_player(const std::string& value) {
  
  _impl_.player_.Set(value, GetArenaForAllocation());
}
inline std::string* SinglePullCardResponse::_internal_mutable_player() {
  
  return _impl_.player_.Mutable(GetArenaForAllocation());
}
inline std::string* SinglePullCardResponse::release_player() {
  // @@protoc_insertion_point(field_release:Uno.SinglePullCardResponse.player)
  return _impl_.player_.Release();
}
inline void SinglePullCardResponse::set_allocated_player(std::string* player) {
  if (player != nullptr) {
    
  } else {
    
  }
  _impl_.player_.SetAllocated(player, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_.IsDefault()) {
    _impl_.player_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Uno.SinglePullCardResponse.player)
}

// repeated uint32 cards = 2;
inline int SinglePullCardResponse::_internal_cards_size() const {
  return _impl_.cards_.size();
}
inline int SinglePullCardResponse::cards_size() const {
  return _internal_cards_size();
}
inline void SinglePullCardResponse::clear_cards() {
  _impl_.cards_.Clear();
}
inline uint32_t SinglePullCardResponse::_internal_cards(int index) const {
  return _impl_.cards_.Get(index);
}
inline uint32_t SinglePullCardResponse::cards(int index) const {
  // @@protoc_insertion_point(field_get:Uno.SinglePullCardResponse.cards)
  return _internal_cards(index);
}
inline void SinglePullCardResponse::set_cards(int index, uint32_t value) {
  _impl_.cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:Uno.SinglePullCardResponse.cards)
}
inline void SinglePullCardResponse::_internal_add_cards(uint32_t value) {
  _impl_.cards_.Add(value);
}
inline void SinglePullCardResponse::add_cards(uint32_t value) {
  _internal_add_cards(value);
  // @@protoc_insertion_point(field_add:Uno.SinglePullCardResponse.cards)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SinglePullCardResponse::_internal_cards() const {
  return _impl_.cards_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SinglePullCardResponse::cards() const {
  // @@protoc_insertion_point(field_list:Uno.SinglePullCardResponse.cards)
  return _internal_cards();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SinglePullCardResponse::_internal_mutable_cards() {
  return &_impl_.cards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SinglePullCardResponse::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:Uno.SinglePullCardResponse.cards)
  return _internal_mutable_cards();
}

// -------------------------------------------------------------------

// PullCardResponse

// repeated .Uno.SinglePullCardResponse pullResponses = 1;
inline int PullCardResponse::_internal_pullresponses_size() const {
  return _impl_.pullresponses_.size();
}
inline int PullCardResponse::pullresponses_size() const {
  return _internal_pullresponses_size();
}
inline void PullCardResponse::clear_pullresponses() {
  _impl_.pullresponses_.Clear();
}
inline ::Uno::SinglePullCardResponse* PullCardResponse::mutable_pullresponses(int index) {
  // @@protoc_insertion_point(field_mutable:Uno.PullCardResponse.pullResponses)
  return _impl_.pullresponses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::SinglePullCardResponse >*
PullCardResponse::mutable_pullresponses() {
  // @@protoc_insertion_point(field_mutable_list:Uno.PullCardResponse.pullResponses)
  return &_impl_.pullresponses_;
}
inline const ::Uno::SinglePullCardResponse& PullCardResponse::_internal_pullresponses(int index) const {
  return _impl_.pullresponses_.Get(index);
}
inline const ::Uno::SinglePullCardResponse& PullCardResponse::pullresponses(int index) const {
  // @@protoc_insertion_point(field_get:Uno.PullCardResponse.pullResponses)
  return _internal_pullresponses(index);
}
inline ::Uno::SinglePullCardResponse* PullCardResponse::_internal_add_pullresponses() {
  return _impl_.pullresponses_.Add();
}
inline ::Uno::SinglePullCardResponse* PullCardResponse::add_pullresponses() {
  ::Uno::SinglePullCardResponse* _add = _internal_add_pullresponses();
  // @@protoc_insertion_point(field_add:Uno.PullCardResponse.pullResponses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Uno::SinglePullCardResponse >&
PullCardResponse::pullresponses() const {
  // @@protoc_insertion_point(field_list:Uno.PullCardResponse.pullResponses)
  return _impl_.pullresponses_;
}

// -------------------------------------------------------------------

// PlayCardRequest

// uint32 card = 1;
inline void PlayCardRequest::clear_card() {
  _impl_.card_ = 0u;
}
inline uint32_t PlayCardRequest::_internal_card() const {
  return _impl_.card_;
}
inline uint32_t PlayCardRequest::card() const {
  // @@protoc_insertion_point(field_get:Uno.PlayCardRequest.card)
  return _internal_card();
}
inline void PlayCardRequest::_internal_set_card(uint32_t value) {
  
  _impl_.card_ = value;
}
inline void PlayCardRequest::set_card(uint32_t value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:Uno.PlayCardRequest.card)
}

// -------------------------------------------------------------------

// PlayCard

// string player = 1;
inline void PlayCard::clear_player() {
  _impl_.player_.ClearToEmpty();
}
inline const std::string& PlayCard::player() const {
  // @@protoc_insertion_point(field_get:Uno.PlayCard.player)
  return _internal_player();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayCard::set_player(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Uno.PlayCard.player)
}
inline std::string* PlayCard::mutable_player() {
  std::string* _s = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Uno.PlayCard.player)
  return _s;
}
inline const std::string& PlayCard::_internal_player() const {
  return _impl_.player_.Get();
}
inline void PlayCard::_internal_set_player(const std::string& value) {
  
  _impl_.player_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayCard::_internal_mutable_player() {
  
  return _impl_.player_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayCard::release_player() {
  // @@protoc_insertion_point(field_release:Uno.PlayCard.player)
  return _impl_.player_.Release();
}
inline void PlayCard::set_allocated_player(std::string* player) {
  if (player != nullptr) {
    
  } else {
    
  }
  _impl_.player_.SetAllocated(player, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_.IsDefault()) {
    _impl_.player_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Uno.PlayCard.player)
}

// string nextPlayer = 2;
inline void PlayCard::clear_nextplayer() {
  _impl_.nextplayer_.ClearToEmpty();
}
inline const std::string& PlayCard::nextplayer() const {
  // @@protoc_insertion_point(field_get:Uno.PlayCard.nextPlayer)
  return _internal_nextplayer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayCard::set_nextplayer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nextplayer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Uno.PlayCard.nextPlayer)
}
inline std::string* PlayCard::mutable_nextplayer() {
  std::string* _s = _internal_mutable_nextplayer();
  // @@protoc_insertion_point(field_mutable:Uno.PlayCard.nextPlayer)
  return _s;
}
inline const std::string& PlayCard::_internal_nextplayer() const {
  return _impl_.nextplayer_.Get();
}
inline void PlayCard::_internal_set_nextplayer(const std::string& value) {
  
  _impl_.nextplayer_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayCard::_internal_mutable_nextplayer() {
  
  return _impl_.nextplayer_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayCard::release_nextplayer() {
  // @@protoc_insertion_point(field_release:Uno.PlayCard.nextPlayer)
  return _impl_.nextplayer_.Release();
}
inline void PlayCard::set_allocated_nextplayer(std::string* nextplayer) {
  if (nextplayer != nullptr) {
    
  } else {
    
  }
  _impl_.nextplayer_.SetAllocated(nextplayer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nextplayer_.IsDefault()) {
    _impl_.nextplayer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Uno.PlayCard.nextPlayer)
}

// uint32 card = 3;
inline void PlayCard::clear_card() {
  _impl_.card_ = 0u;
}
inline uint32_t PlayCard::_internal_card() const {
  return _impl_.card_;
}
inline uint32_t PlayCard::card() const {
  // @@protoc_insertion_point(field_get:Uno.PlayCard.card)
  return _internal_card();
}
inline void PlayCard::_internal_set_card(uint32_t value) {
  
  _impl_.card_ = value;
}
inline void PlayCard::set_card(uint32_t value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:Uno.PlayCard.card)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Uno

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UnoMessages_2eproto
