// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: join.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_join_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_join_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ClientInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_join_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_join_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_join_2eproto;
namespace Base {
class AddClient;
struct AddClientDefaultTypeInternal;
extern AddClientDefaultTypeInternal _AddClient_default_instance_;
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
struct CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class Info;
struct InfoDefaultTypeInternal;
extern InfoDefaultTypeInternal _Info_default_instance_;
class JoinRequest;
struct JoinRequestDefaultTypeInternal;
extern JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
class JoinResponse;
struct JoinResponseDefaultTypeInternal;
extern JoinResponseDefaultTypeInternal _JoinResponse_default_instance_;
class RemoveClient;
struct RemoveClientDefaultTypeInternal;
extern RemoveClientDefaultTypeInternal _RemoveClient_default_instance_;
}  // namespace Base
PROTOBUF_NAMESPACE_OPEN
template<> ::Base::AddClient* Arena::CreateMaybeMessage<::Base::AddClient>(Arena*);
template<> ::Base::CreateRequest* Arena::CreateMaybeMessage<::Base::CreateRequest>(Arena*);
template<> ::Base::CreateResponse* Arena::CreateMaybeMessage<::Base::CreateResponse>(Arena*);
template<> ::Base::Info* Arena::CreateMaybeMessage<::Base::Info>(Arena*);
template<> ::Base::JoinRequest* Arena::CreateMaybeMessage<::Base::JoinRequest>(Arena*);
template<> ::Base::JoinResponse* Arena::CreateMaybeMessage<::Base::JoinResponse>(Arena*);
template<> ::Base::RemoveClient* Arena::CreateMaybeMessage<::Base::RemoveClient>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Base {

enum SERVER_ROOM_JOIN_INFO : int {
  ROOM_JOIN_OK = 0,
  ROOM_JOIN_UNAVAILABLE = 1,
  ROOM_JOIN_NO_SHARED = 2,
  ROOM_JOIN_NAME_COLLISION = 3,
  ROOM_JOIN_INVALID_MESSAGE = 4,
  SERVER_ROOM_JOIN_INFO_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SERVER_ROOM_JOIN_INFO_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SERVER_ROOM_JOIN_INFO_IsValid(int value);
constexpr SERVER_ROOM_JOIN_INFO SERVER_ROOM_JOIN_INFO_MIN = ROOM_JOIN_OK;
constexpr SERVER_ROOM_JOIN_INFO SERVER_ROOM_JOIN_INFO_MAX = ROOM_JOIN_INVALID_MESSAGE;
constexpr int SERVER_ROOM_JOIN_INFO_ARRAYSIZE = SERVER_ROOM_JOIN_INFO_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SERVER_ROOM_JOIN_INFO_descriptor();
template<typename T>
inline const std::string& SERVER_ROOM_JOIN_INFO_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SERVER_ROOM_JOIN_INFO>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SERVER_ROOM_JOIN_INFO_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SERVER_ROOM_JOIN_INFO_descriptor(), enum_t_value);
}
inline bool SERVER_ROOM_JOIN_INFO_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SERVER_ROOM_JOIN_INFO* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SERVER_ROOM_JOIN_INFO>(
    SERVER_ROOM_JOIN_INFO_descriptor(), name, value);
}
enum SERVER_ROOM_CREATE_INFO : int {
  ROOM_CREATE_OK = 0,
  ROOM_CREATE_COLLISION = 1,
  ROOM_CREATE_INVALID_MESSAGE = 2,
  SERVER_ROOM_CREATE_INFO_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SERVER_ROOM_CREATE_INFO_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SERVER_ROOM_CREATE_INFO_IsValid(int value);
constexpr SERVER_ROOM_CREATE_INFO SERVER_ROOM_CREATE_INFO_MIN = ROOM_CREATE_OK;
constexpr SERVER_ROOM_CREATE_INFO SERVER_ROOM_CREATE_INFO_MAX = ROOM_CREATE_INVALID_MESSAGE;
constexpr int SERVER_ROOM_CREATE_INFO_ARRAYSIZE = SERVER_ROOM_CREATE_INFO_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SERVER_ROOM_CREATE_INFO_descriptor();
template<typename T>
inline const std::string& SERVER_ROOM_CREATE_INFO_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SERVER_ROOM_CREATE_INFO>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SERVER_ROOM_CREATE_INFO_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SERVER_ROOM_CREATE_INFO_descriptor(), enum_t_value);
}
inline bool SERVER_ROOM_CREATE_INFO_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SERVER_ROOM_CREATE_INFO* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SERVER_ROOM_CREATE_INFO>(
    SERVER_ROOM_CREATE_INFO_descriptor(), name, value);
}
// ===================================================================

class Info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.Info) */ {
 public:
  inline Info() : Info(nullptr) {}
  ~Info() override;
  explicit PROTOBUF_CONSTEXPR Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Info(const Info& from);
  Info(Info&& from) noexcept
    : Info() {
    *this = ::std::move(from);
  }

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Info& operator=(Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const Info* internal_default_instance() {
    return reinterpret_cast<const Info*>(
               &_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Info& a, Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Info& from) {
    Info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.Info";
  }
  protected:
  explicit Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailablePluginsFieldNumber = 3,
    kServerIDFieldNumber = 2,
    kClientFieldNumber = 1,
  };
  // repeated string availablePlugins = 3;
  int availableplugins_size() const;
  private:
  int _internal_availableplugins_size() const;
  public:
  void clear_availableplugins();
  const std::string& availableplugins(int index) const;
  std::string* mutable_availableplugins(int index);
  void set_availableplugins(int index, const std::string& value);
  void set_availableplugins(int index, std::string&& value);
  void set_availableplugins(int index, const char* value);
  void set_availableplugins(int index, const char* value, size_t size);
  std::string* add_availableplugins();
  void add_availableplugins(const std::string& value);
  void add_availableplugins(std::string&& value);
  void add_availableplugins(const char* value);
  void add_availableplugins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& availableplugins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_availableplugins();
  private:
  const std::string& _internal_availableplugins(int index) const;
  std::string* _internal_add_availableplugins();
  public:

  // string serverID = 2;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // .Base.ClientInfo client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::Base::ClientInfo& client() const;
  PROTOBUF_NODISCARD ::Base::ClientInfo* release_client();
  ::Base::ClientInfo* mutable_client();
  void set_allocated_client(::Base::ClientInfo* client);
  private:
  const ::Base::ClientInfo& _internal_client() const;
  ::Base::ClientInfo* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::Base::ClientInfo* client);
  ::Base::ClientInfo* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:Base.Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> availableplugins_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
    ::Base::ClientInfo* client_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_join_2eproto;
};
// -------------------------------------------------------------------

class JoinRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.JoinRequest) */ {
 public:
  inline JoinRequest() : JoinRequest(nullptr) {}
  ~JoinRequest() override;
  explicit PROTOBUF_CONSTEXPR JoinRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRequest(const JoinRequest& from);
  JoinRequest(JoinRequest&& from) noexcept
    : JoinRequest() {
    *this = ::std::move(from);
  }

  inline JoinRequest& operator=(const JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRequest& operator=(JoinRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRequest*>(
               &_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JoinRequest& a, JoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinRequest& from) {
    JoinRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.JoinRequest";
  }
  protected:
  explicit JoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 3,
    kInfoFieldNumber = 1,
  };
  // optional bytes ID = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .Base.Info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Base::Info& info() const;
  PROTOBUF_NODISCARD ::Base::Info* release_info();
  ::Base::Info* mutable_info();
  void set_allocated_info(::Base::Info* info);
  private:
  const ::Base::Info& _internal_info() const;
  ::Base::Info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Base::Info* info);
  ::Base::Info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Base.JoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::Base::Info* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_join_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRequest& from) {
    CreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Base.Info info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Base::Info& info() const;
  PROTOBUF_NODISCARD ::Base::Info* release_info();
  ::Base::Info* mutable_info();
  void set_allocated_info(::Base::Info* info);
  private:
  const ::Base::Info& _internal_info() const;
  ::Base::Info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Base::Info* info);
  ::Base::Info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Base.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Base::Info* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_join_2eproto;
};
// -------------------------------------------------------------------

class JoinResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.JoinResponse) */ {
 public:
  inline JoinResponse() : JoinResponse(nullptr) {}
  ~JoinResponse() override;
  explicit PROTOBUF_CONSTEXPR JoinResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinResponse(const JoinResponse& from);
  JoinResponse(JoinResponse&& from) noexcept
    : JoinResponse() {
    *this = ::std::move(from);
  }

  inline JoinResponse& operator=(const JoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinResponse& operator=(JoinResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinResponse* internal_default_instance() {
    return reinterpret_cast<const JoinResponse*>(
               &_JoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JoinResponse& a, JoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinResponse& from) {
    JoinResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.JoinResponse";
  }
  protected:
  explicit JoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 3,
    kInfoFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // bytes ID = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .Base.Info info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Base::Info& info() const;
  PROTOBUF_NODISCARD ::Base::Info* release_info();
  ::Base::Info* mutable_info();
  void set_allocated_info(::Base::Info* info);
  private:
  const ::Base::Info& _internal_info() const;
  ::Base::Info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Base::Info* info);
  ::Base::Info* unsafe_arena_release_info();

  // .Base.SERVER_ROOM_JOIN_INFO error = 1;
  void clear_error();
  ::Base::SERVER_ROOM_JOIN_INFO error() const;
  void set_error(::Base::SERVER_ROOM_JOIN_INFO value);
  private:
  ::Base::SERVER_ROOM_JOIN_INFO _internal_error() const;
  void _internal_set_error(::Base::SERVER_ROOM_JOIN_INFO value);
  public:

  // @@protoc_insertion_point(class_scope:Base.JoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::Base::Info* info_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_join_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.CreateResponse) */ {
 public:
  inline CreateResponse() : CreateResponse(nullptr) {}
  ~CreateResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateResponse& from) {
    CreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.CreateResponse";
  }
  protected:
  explicit CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 3,
    kInfoFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // bytes ID = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .Base.Info info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Base::Info& info() const;
  PROTOBUF_NODISCARD ::Base::Info* release_info();
  ::Base::Info* mutable_info();
  void set_allocated_info(::Base::Info* info);
  private:
  const ::Base::Info& _internal_info() const;
  ::Base::Info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Base::Info* info);
  ::Base::Info* unsafe_arena_release_info();

  // .Base.SERVER_ROOM_CREATE_INFO error = 1;
  void clear_error();
  ::Base::SERVER_ROOM_CREATE_INFO error() const;
  void set_error(::Base::SERVER_ROOM_CREATE_INFO value);
  private:
  ::Base::SERVER_ROOM_CREATE_INFO _internal_error() const;
  void _internal_set_error(::Base::SERVER_ROOM_CREATE_INFO value);
  public:

  // @@protoc_insertion_point(class_scope:Base.CreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::Base::Info* info_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_join_2eproto;
};
// -------------------------------------------------------------------

class AddClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.AddClient) */ {
 public:
  inline AddClient() : AddClient(nullptr) {}
  ~AddClient() override;
  explicit PROTOBUF_CONSTEXPR AddClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddClient(const AddClient& from);
  AddClient(AddClient&& from) noexcept
    : AddClient() {
    *this = ::std::move(from);
  }

  inline AddClient& operator=(const AddClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddClient& operator=(AddClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddClient* internal_default_instance() {
    return reinterpret_cast<const AddClient*>(
               &_AddClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddClient& a, AddClient& b) {
    a.Swap(&b);
  }
  inline void Swap(AddClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddClient& from) {
    AddClient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.AddClient";
  }
  protected:
  explicit AddClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoinedFieldNumber = 1,
  };
  // .Base.ClientInfo joined = 1;
  bool has_joined() const;
  private:
  bool _internal_has_joined() const;
  public:
  void clear_joined();
  const ::Base::ClientInfo& joined() const;
  PROTOBUF_NODISCARD ::Base::ClientInfo* release_joined();
  ::Base::ClientInfo* mutable_joined();
  void set_allocated_joined(::Base::ClientInfo* joined);
  private:
  const ::Base::ClientInfo& _internal_joined() const;
  ::Base::ClientInfo* _internal_mutable_joined();
  public:
  void unsafe_arena_set_allocated_joined(
      ::Base::ClientInfo* joined);
  ::Base::ClientInfo* unsafe_arena_release_joined();

  // @@protoc_insertion_point(class_scope:Base.AddClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Base::ClientInfo* joined_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_join_2eproto;
};
// -------------------------------------------------------------------

class RemoveClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.RemoveClient) */ {
 public:
  inline RemoveClient() : RemoveClient(nullptr) {}
  ~RemoveClient() override;
  explicit PROTOBUF_CONSTEXPR RemoveClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveClient(const RemoveClient& from);
  RemoveClient(RemoveClient&& from) noexcept
    : RemoveClient() {
    *this = ::std::move(from);
  }

  inline RemoveClient& operator=(const RemoveClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveClient& operator=(RemoveClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveClient* internal_default_instance() {
    return reinterpret_cast<const RemoveClient*>(
               &_RemoveClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RemoveClient& a, RemoveClient& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveClient& from) {
    RemoveClient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.RemoveClient";
  }
  protected:
  explicit RemoveClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedFieldNumber = 1,
  };
  // .Base.ClientInfo removed = 1;
  bool has_removed() const;
  private:
  bool _internal_has_removed() const;
  public:
  void clear_removed();
  const ::Base::ClientInfo& removed() const;
  PROTOBUF_NODISCARD ::Base::ClientInfo* release_removed();
  ::Base::ClientInfo* mutable_removed();
  void set_allocated_removed(::Base::ClientInfo* removed);
  private:
  const ::Base::ClientInfo& _internal_removed() const;
  ::Base::ClientInfo* _internal_mutable_removed();
  public:
  void unsafe_arena_set_allocated_removed(
      ::Base::ClientInfo* removed);
  ::Base::ClientInfo* unsafe_arena_release_removed();

  // @@protoc_insertion_point(class_scope:Base.RemoveClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Base::ClientInfo* removed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_join_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Info

// .Base.ClientInfo client = 1;
inline bool Info::_internal_has_client() const {
  return this != internal_default_instance() && _impl_.client_ != nullptr;
}
inline bool Info::has_client() const {
  return _internal_has_client();
}
inline const ::Base::ClientInfo& Info::_internal_client() const {
  const ::Base::ClientInfo* p = _impl_.client_;
  return p != nullptr ? *p : reinterpret_cast<const ::Base::ClientInfo&>(
      ::Base::_ClientInfo_default_instance_);
}
inline const ::Base::ClientInfo& Info::client() const {
  // @@protoc_insertion_point(field_get:Base.Info.client)
  return _internal_client();
}
inline void Info::unsafe_arena_set_allocated_client(
    ::Base::ClientInfo* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  _impl_.client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Base.Info.client)
}
inline ::Base::ClientInfo* Info::release_client() {
  
  ::Base::ClientInfo* temp = _impl_.client_;
  _impl_.client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Base::ClientInfo* Info::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:Base.Info.client)
  
  ::Base::ClientInfo* temp = _impl_.client_;
  _impl_.client_ = nullptr;
  return temp;
}
inline ::Base::ClientInfo* Info::_internal_mutable_client() {
  
  if (_impl_.client_ == nullptr) {
    auto* p = CreateMaybeMessage<::Base::ClientInfo>(GetArenaForAllocation());
    _impl_.client_ = p;
  }
  return _impl_.client_;
}
inline ::Base::ClientInfo* Info::mutable_client() {
  ::Base::ClientInfo* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:Base.Info.client)
  return _msg;
}
inline void Info::set_allocated_client(::Base::ClientInfo* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client));
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_ = client;
  // @@protoc_insertion_point(field_set_allocated:Base.Info.client)
}

// string serverID = 2;
inline void Info::clear_serverid() {
  _impl_.serverid_.ClearToEmpty();
}
inline const std::string& Info::serverid() const {
  // @@protoc_insertion_point(field_get:Base.Info.serverID)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Info::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serverid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.Info.serverID)
}
inline std::string* Info::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:Base.Info.serverID)
  return _s;
}
inline const std::string& Info::_internal_serverid() const {
  return _impl_.serverid_.Get();
}
inline void Info::_internal_set_serverid(const std::string& value) {
  
  _impl_.serverid_.Set(value, GetArenaForAllocation());
}
inline std::string* Info::_internal_mutable_serverid() {
  
  return _impl_.serverid_.Mutable(GetArenaForAllocation());
}
inline std::string* Info::release_serverid() {
  // @@protoc_insertion_point(field_release:Base.Info.serverID)
  return _impl_.serverid_.Release();
}
inline void Info::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  _impl_.serverid_.SetAllocated(serverid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverid_.IsDefault()) {
    _impl_.serverid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.Info.serverID)
}

// repeated string availablePlugins = 3;
inline int Info::_internal_availableplugins_size() const {
  return _impl_.availableplugins_.size();
}
inline int Info::availableplugins_size() const {
  return _internal_availableplugins_size();
}
inline void Info::clear_availableplugins() {
  _impl_.availableplugins_.Clear();
}
inline std::string* Info::add_availableplugins() {
  std::string* _s = _internal_add_availableplugins();
  // @@protoc_insertion_point(field_add_mutable:Base.Info.availablePlugins)
  return _s;
}
inline const std::string& Info::_internal_availableplugins(int index) const {
  return _impl_.availableplugins_.Get(index);
}
inline const std::string& Info::availableplugins(int index) const {
  // @@protoc_insertion_point(field_get:Base.Info.availablePlugins)
  return _internal_availableplugins(index);
}
inline std::string* Info::mutable_availableplugins(int index) {
  // @@protoc_insertion_point(field_mutable:Base.Info.availablePlugins)
  return _impl_.availableplugins_.Mutable(index);
}
inline void Info::set_availableplugins(int index, const std::string& value) {
  _impl_.availableplugins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Base.Info.availablePlugins)
}
inline void Info::set_availableplugins(int index, std::string&& value) {
  _impl_.availableplugins_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Base.Info.availablePlugins)
}
inline void Info::set_availableplugins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.availableplugins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Base.Info.availablePlugins)
}
inline void Info::set_availableplugins(int index, const char* value, size_t size) {
  _impl_.availableplugins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Base.Info.availablePlugins)
}
inline std::string* Info::_internal_add_availableplugins() {
  return _impl_.availableplugins_.Add();
}
inline void Info::add_availableplugins(const std::string& value) {
  _impl_.availableplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Base.Info.availablePlugins)
}
inline void Info::add_availableplugins(std::string&& value) {
  _impl_.availableplugins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Base.Info.availablePlugins)
}
inline void Info::add_availableplugins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.availableplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Base.Info.availablePlugins)
}
inline void Info::add_availableplugins(const char* value, size_t size) {
  _impl_.availableplugins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Base.Info.availablePlugins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Info::availableplugins() const {
  // @@protoc_insertion_point(field_list:Base.Info.availablePlugins)
  return _impl_.availableplugins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Info::mutable_availableplugins() {
  // @@protoc_insertion_point(field_mutable_list:Base.Info.availablePlugins)
  return &_impl_.availableplugins_;
}

// -------------------------------------------------------------------

// JoinRequest

// .Base.Info info = 1;
inline bool JoinRequest::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool JoinRequest::has_info() const {
  return _internal_has_info();
}
inline void JoinRequest::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Base::Info& JoinRequest::_internal_info() const {
  const ::Base::Info* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Base::Info&>(
      ::Base::_Info_default_instance_);
}
inline const ::Base::Info& JoinRequest::info() const {
  // @@protoc_insertion_point(field_get:Base.JoinRequest.info)
  return _internal_info();
}
inline void JoinRequest::unsafe_arena_set_allocated_info(
    ::Base::Info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Base.JoinRequest.info)
}
inline ::Base::Info* JoinRequest::release_info() {
  
  ::Base::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Base::Info* JoinRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Base.JoinRequest.info)
  
  ::Base::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Base::Info* JoinRequest::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Base::Info>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Base::Info* JoinRequest::mutable_info() {
  ::Base::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Base.JoinRequest.info)
  return _msg;
}
inline void JoinRequest::set_allocated_info(::Base::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Base.JoinRequest.info)
}

// optional bytes ID = 3;
inline bool JoinRequest::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JoinRequest::has_id() const {
  return _internal_has_id();
}
inline void JoinRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinRequest::id() const {
  // @@protoc_insertion_point(field_get:Base.JoinRequest.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinRequest::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.JoinRequest.ID)
}
inline std::string* JoinRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Base.JoinRequest.ID)
  return _s;
}
inline const std::string& JoinRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void JoinRequest::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinRequest::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinRequest::release_id() {
  // @@protoc_insertion_point(field_release:Base.JoinRequest.ID)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void JoinRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.JoinRequest.ID)
}

// -------------------------------------------------------------------

// CreateRequest

// .Base.Info info = 1;
inline bool CreateRequest::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool CreateRequest::has_info() const {
  return _internal_has_info();
}
inline void CreateRequest::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Base::Info& CreateRequest::_internal_info() const {
  const ::Base::Info* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Base::Info&>(
      ::Base::_Info_default_instance_);
}
inline const ::Base::Info& CreateRequest::info() const {
  // @@protoc_insertion_point(field_get:Base.CreateRequest.info)
  return _internal_info();
}
inline void CreateRequest::unsafe_arena_set_allocated_info(
    ::Base::Info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Base.CreateRequest.info)
}
inline ::Base::Info* CreateRequest::release_info() {
  
  ::Base::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Base::Info* CreateRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Base.CreateRequest.info)
  
  ::Base::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Base::Info* CreateRequest::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Base::Info>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Base::Info* CreateRequest::mutable_info() {
  ::Base::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Base.CreateRequest.info)
  return _msg;
}
inline void CreateRequest::set_allocated_info(::Base::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Base.CreateRequest.info)
}

// -------------------------------------------------------------------

// JoinResponse

// .Base.SERVER_ROOM_JOIN_INFO error = 1;
inline void JoinResponse::clear_error() {
  _impl_.error_ = 0;
}
inline ::Base::SERVER_ROOM_JOIN_INFO JoinResponse::_internal_error() const {
  return static_cast< ::Base::SERVER_ROOM_JOIN_INFO >(_impl_.error_);
}
inline ::Base::SERVER_ROOM_JOIN_INFO JoinResponse::error() const {
  // @@protoc_insertion_point(field_get:Base.JoinResponse.error)
  return _internal_error();
}
inline void JoinResponse::_internal_set_error(::Base::SERVER_ROOM_JOIN_INFO value) {
  
  _impl_.error_ = value;
}
inline void JoinResponse::set_error(::Base::SERVER_ROOM_JOIN_INFO value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Base.JoinResponse.error)
}

// .Base.Info info = 2;
inline bool JoinResponse::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool JoinResponse::has_info() const {
  return _internal_has_info();
}
inline void JoinResponse::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Base::Info& JoinResponse::_internal_info() const {
  const ::Base::Info* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Base::Info&>(
      ::Base::_Info_default_instance_);
}
inline const ::Base::Info& JoinResponse::info() const {
  // @@protoc_insertion_point(field_get:Base.JoinResponse.info)
  return _internal_info();
}
inline void JoinResponse::unsafe_arena_set_allocated_info(
    ::Base::Info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Base.JoinResponse.info)
}
inline ::Base::Info* JoinResponse::release_info() {
  
  ::Base::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Base::Info* JoinResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Base.JoinResponse.info)
  
  ::Base::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Base::Info* JoinResponse::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Base::Info>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Base::Info* JoinResponse::mutable_info() {
  ::Base::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Base.JoinResponse.info)
  return _msg;
}
inline void JoinResponse::set_allocated_info(::Base::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Base.JoinResponse.info)
}

// bytes ID = 3;
inline void JoinResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& JoinResponse::id() const {
  // @@protoc_insertion_point(field_get:Base.JoinResponse.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.JoinResponse.ID)
}
inline std::string* JoinResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Base.JoinResponse.ID)
  return _s;
}
inline const std::string& JoinResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void JoinResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinResponse::release_id() {
  // @@protoc_insertion_point(field_release:Base.JoinResponse.ID)
  return _impl_.id_.Release();
}
inline void JoinResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.JoinResponse.ID)
}

// -------------------------------------------------------------------

// CreateResponse

// .Base.SERVER_ROOM_CREATE_INFO error = 1;
inline void CreateResponse::clear_error() {
  _impl_.error_ = 0;
}
inline ::Base::SERVER_ROOM_CREATE_INFO CreateResponse::_internal_error() const {
  return static_cast< ::Base::SERVER_ROOM_CREATE_INFO >(_impl_.error_);
}
inline ::Base::SERVER_ROOM_CREATE_INFO CreateResponse::error() const {
  // @@protoc_insertion_point(field_get:Base.CreateResponse.error)
  return _internal_error();
}
inline void CreateResponse::_internal_set_error(::Base::SERVER_ROOM_CREATE_INFO value) {
  
  _impl_.error_ = value;
}
inline void CreateResponse::set_error(::Base::SERVER_ROOM_CREATE_INFO value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Base.CreateResponse.error)
}

// .Base.Info info = 2;
inline bool CreateResponse::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool CreateResponse::has_info() const {
  return _internal_has_info();
}
inline void CreateResponse::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::Base::Info& CreateResponse::_internal_info() const {
  const ::Base::Info* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Base::Info&>(
      ::Base::_Info_default_instance_);
}
inline const ::Base::Info& CreateResponse::info() const {
  // @@protoc_insertion_point(field_get:Base.CreateResponse.info)
  return _internal_info();
}
inline void CreateResponse::unsafe_arena_set_allocated_info(
    ::Base::Info* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Base.CreateResponse.info)
}
inline ::Base::Info* CreateResponse::release_info() {
  
  ::Base::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Base::Info* CreateResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Base.CreateResponse.info)
  
  ::Base::Info* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Base::Info* CreateResponse::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Base::Info>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Base::Info* CreateResponse::mutable_info() {
  ::Base::Info* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Base.CreateResponse.info)
  return _msg;
}
inline void CreateResponse::set_allocated_info(::Base::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Base.CreateResponse.info)
}

// bytes ID = 3;
inline void CreateResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CreateResponse::id() const {
  // @@protoc_insertion_point(field_get:Base.CreateResponse.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.CreateResponse.ID)
}
inline std::string* CreateResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Base.CreateResponse.ID)
  return _s;
}
inline const std::string& CreateResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CreateResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateResponse::release_id() {
  // @@protoc_insertion_point(field_release:Base.CreateResponse.ID)
  return _impl_.id_.Release();
}
inline void CreateResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.CreateResponse.ID)
}

// -------------------------------------------------------------------

// AddClient

// .Base.ClientInfo joined = 1;
inline bool AddClient::_internal_has_joined() const {
  return this != internal_default_instance() && _impl_.joined_ != nullptr;
}
inline bool AddClient::has_joined() const {
  return _internal_has_joined();
}
inline const ::Base::ClientInfo& AddClient::_internal_joined() const {
  const ::Base::ClientInfo* p = _impl_.joined_;
  return p != nullptr ? *p : reinterpret_cast<const ::Base::ClientInfo&>(
      ::Base::_ClientInfo_default_instance_);
}
inline const ::Base::ClientInfo& AddClient::joined() const {
  // @@protoc_insertion_point(field_get:Base.AddClient.joined)
  return _internal_joined();
}
inline void AddClient::unsafe_arena_set_allocated_joined(
    ::Base::ClientInfo* joined) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joined_);
  }
  _impl_.joined_ = joined;
  if (joined) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Base.AddClient.joined)
}
inline ::Base::ClientInfo* AddClient::release_joined() {
  
  ::Base::ClientInfo* temp = _impl_.joined_;
  _impl_.joined_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Base::ClientInfo* AddClient::unsafe_arena_release_joined() {
  // @@protoc_insertion_point(field_release:Base.AddClient.joined)
  
  ::Base::ClientInfo* temp = _impl_.joined_;
  _impl_.joined_ = nullptr;
  return temp;
}
inline ::Base::ClientInfo* AddClient::_internal_mutable_joined() {
  
  if (_impl_.joined_ == nullptr) {
    auto* p = CreateMaybeMessage<::Base::ClientInfo>(GetArenaForAllocation());
    _impl_.joined_ = p;
  }
  return _impl_.joined_;
}
inline ::Base::ClientInfo* AddClient::mutable_joined() {
  ::Base::ClientInfo* _msg = _internal_mutable_joined();
  // @@protoc_insertion_point(field_mutable:Base.AddClient.joined)
  return _msg;
}
inline void AddClient::set_allocated_joined(::Base::ClientInfo* joined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joined_);
  }
  if (joined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joined));
    if (message_arena != submessage_arena) {
      joined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joined, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joined_ = joined;
  // @@protoc_insertion_point(field_set_allocated:Base.AddClient.joined)
}

// -------------------------------------------------------------------

// RemoveClient

// .Base.ClientInfo removed = 1;
inline bool RemoveClient::_internal_has_removed() const {
  return this != internal_default_instance() && _impl_.removed_ != nullptr;
}
inline bool RemoveClient::has_removed() const {
  return _internal_has_removed();
}
inline const ::Base::ClientInfo& RemoveClient::_internal_removed() const {
  const ::Base::ClientInfo* p = _impl_.removed_;
  return p != nullptr ? *p : reinterpret_cast<const ::Base::ClientInfo&>(
      ::Base::_ClientInfo_default_instance_);
}
inline const ::Base::ClientInfo& RemoveClient::removed() const {
  // @@protoc_insertion_point(field_get:Base.RemoveClient.removed)
  return _internal_removed();
}
inline void RemoveClient::unsafe_arena_set_allocated_removed(
    ::Base::ClientInfo* removed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removed_);
  }
  _impl_.removed_ = removed;
  if (removed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Base.RemoveClient.removed)
}
inline ::Base::ClientInfo* RemoveClient::release_removed() {
  
  ::Base::ClientInfo* temp = _impl_.removed_;
  _impl_.removed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Base::ClientInfo* RemoveClient::unsafe_arena_release_removed() {
  // @@protoc_insertion_point(field_release:Base.RemoveClient.removed)
  
  ::Base::ClientInfo* temp = _impl_.removed_;
  _impl_.removed_ = nullptr;
  return temp;
}
inline ::Base::ClientInfo* RemoveClient::_internal_mutable_removed() {
  
  if (_impl_.removed_ == nullptr) {
    auto* p = CreateMaybeMessage<::Base::ClientInfo>(GetArenaForAllocation());
    _impl_.removed_ = p;
  }
  return _impl_.removed_;
}
inline ::Base::ClientInfo* RemoveClient::mutable_removed() {
  ::Base::ClientInfo* _msg = _internal_mutable_removed();
  // @@protoc_insertion_point(field_mutable:Base.RemoveClient.removed)
  return _msg;
}
inline void RemoveClient::set_allocated_removed(::Base::ClientInfo* removed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removed_);
  }
  if (removed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed));
    if (message_arena != submessage_arena) {
      removed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removed_ = removed;
  // @@protoc_insertion_point(field_set_allocated:Base.RemoveClient.removed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Base

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Base::SERVER_ROOM_JOIN_INFO> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Base::SERVER_ROOM_JOIN_INFO>() {
  return ::Base::SERVER_ROOM_JOIN_INFO_descriptor();
}
template <> struct is_proto_enum< ::Base::SERVER_ROOM_CREATE_INFO> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Base::SERVER_ROOM_CREATE_INFO>() {
  return ::Base::SERVER_ROOM_CREATE_INFO_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_join_2eproto
