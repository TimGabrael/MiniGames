// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lobby_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lobby_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lobby_2eproto;
namespace Base {
class StartPlugin;
struct StartPluginDefaultTypeInternal;
extern StartPluginDefaultTypeInternal _StartPlugin_default_instance_;
class SyncData;
struct SyncDataDefaultTypeInternal;
extern SyncDataDefaultTypeInternal _SyncData_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
}  // namespace Base
PROTOBUF_NAMESPACE_OPEN
template<> ::Base::StartPlugin* Arena::CreateMaybeMessage<::Base::StartPlugin>(Arena*);
template<> ::Base::SyncData* Arena::CreateMaybeMessage<::Base::SyncData>(Arena*);
template<> ::Base::Vote* Arena::CreateMaybeMessage<::Base::Vote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Base {

// ===================================================================

class Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() override;
  explicit PROTOBUF_CONSTEXPR Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vote& from) {
    Vote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.Vote";
  }
  protected:
  explicit Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginFieldNumber = 1,
    kClientNameFieldNumber = 2,
  };
  // optional string plugin = 1;
  bool has_plugin() const;
  private:
  bool _internal_has_plugin() const;
  public:
  void clear_plugin();
  const std::string& plugin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plugin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plugin();
  PROTOBUF_NODISCARD std::string* release_plugin();
  void set_allocated_plugin(std::string* plugin);
  private:
  const std::string& _internal_plugin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plugin(const std::string& value);
  std::string* _internal_mutable_plugin();
  public:

  // string clientName = 2;
  void clear_clientname();
  const std::string& clientname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientname();
  PROTOBUF_NODISCARD std::string* release_clientname();
  void set_allocated_clientname(std::string* clientname);
  private:
  const std::string& _internal_clientname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientname(const std::string& value);
  std::string* _internal_mutable_clientname();
  public:

  // @@protoc_insertion_point(class_scope:Base.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plugin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class SyncData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.SyncData) */ {
 public:
  inline SyncData() : SyncData(nullptr) {}
  ~SyncData() override;
  explicit PROTOBUF_CONSTEXPR SyncData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncData(const SyncData& from);
  SyncData(SyncData&& from) noexcept
    : SyncData() {
    *this = ::std::move(from);
  }

  inline SyncData& operator=(const SyncData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncData& operator=(SyncData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncData* internal_default_instance() {
    return reinterpret_cast<const SyncData*>(
               &_SyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncData& a, SyncData& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncData& from) {
    SyncData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.SyncData";
  }
  protected:
  explicit SyncData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
    kRemainingTimeFieldNumber = 2,
    kRunningFieldNumber = 3,
  };
  // repeated .Base.Vote votes = 1;
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::Base::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::Vote >*
      mutable_votes();
  private:
  const ::Base::Vote& _internal_votes(int index) const;
  ::Base::Vote* _internal_add_votes();
  public:
  const ::Base::Vote& votes(int index) const;
  ::Base::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::Vote >&
      votes() const;

  // int32 remainingTime = 2;
  void clear_remainingtime();
  int32_t remainingtime() const;
  void set_remainingtime(int32_t value);
  private:
  int32_t _internal_remainingtime() const;
  void _internal_set_remainingtime(int32_t value);
  public:

  // bool running = 3;
  void clear_running();
  bool running() const;
  void set_running(bool value);
  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Base.SyncData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::Vote > votes_;
    int32_t remainingtime_;
    bool running_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class StartPlugin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.StartPlugin) */ {
 public:
  inline StartPlugin() : StartPlugin(nullptr) {}
  ~StartPlugin() override;
  explicit PROTOBUF_CONSTEXPR StartPlugin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartPlugin(const StartPlugin& from);
  StartPlugin(StartPlugin&& from) noexcept
    : StartPlugin() {
    *this = ::std::move(from);
  }

  inline StartPlugin& operator=(const StartPlugin& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartPlugin& operator=(StartPlugin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartPlugin& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartPlugin* internal_default_instance() {
    return reinterpret_cast<const StartPlugin*>(
               &_StartPlugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartPlugin& a, StartPlugin& b) {
    a.Swap(&b);
  }
  inline void Swap(StartPlugin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartPlugin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartPlugin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartPlugin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartPlugin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartPlugin& from) {
    StartPlugin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartPlugin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.StartPlugin";
  }
  protected:
  explicit StartPlugin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginIDFieldNumber = 1,
  };
  // string pluginID = 1;
  void clear_pluginid();
  const std::string& pluginid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pluginid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pluginid();
  PROTOBUF_NODISCARD std::string* release_pluginid();
  void set_allocated_pluginid(std::string* pluginid);
  private:
  const std::string& _internal_pluginid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pluginid(const std::string& value);
  std::string* _internal_mutable_pluginid();
  public:

  // @@protoc_insertion_point(class_scope:Base.StartPlugin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pluginid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vote

// optional string plugin = 1;
inline bool Vote::_internal_has_plugin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vote::has_plugin() const {
  return _internal_has_plugin();
}
inline void Vote::clear_plugin() {
  _impl_.plugin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Vote::plugin() const {
  // @@protoc_insertion_point(field_get:Base.Vote.plugin)
  return _internal_plugin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vote::set_plugin(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.plugin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.Vote.plugin)
}
inline std::string* Vote::mutable_plugin() {
  std::string* _s = _internal_mutable_plugin();
  // @@protoc_insertion_point(field_mutable:Base.Vote.plugin)
  return _s;
}
inline const std::string& Vote::_internal_plugin() const {
  return _impl_.plugin_.Get();
}
inline void Vote::_internal_set_plugin(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.plugin_.Set(value, GetArenaForAllocation());
}
inline std::string* Vote::_internal_mutable_plugin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.plugin_.Mutable(GetArenaForAllocation());
}
inline std::string* Vote::release_plugin() {
  // @@protoc_insertion_point(field_release:Base.Vote.plugin)
  if (!_internal_has_plugin()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.plugin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plugin_.IsDefault()) {
    _impl_.plugin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Vote::set_allocated_plugin(std::string* plugin) {
  if (plugin != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.plugin_.SetAllocated(plugin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plugin_.IsDefault()) {
    _impl_.plugin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.Vote.plugin)
}

// string clientName = 2;
inline void Vote::clear_clientname() {
  _impl_.clientname_.ClearToEmpty();
}
inline const std::string& Vote::clientname() const {
  // @@protoc_insertion_point(field_get:Base.Vote.clientName)
  return _internal_clientname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Vote::set_clientname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.Vote.clientName)
}
inline std::string* Vote::mutable_clientname() {
  std::string* _s = _internal_mutable_clientname();
  // @@protoc_insertion_point(field_mutable:Base.Vote.clientName)
  return _s;
}
inline const std::string& Vote::_internal_clientname() const {
  return _impl_.clientname_.Get();
}
inline void Vote::_internal_set_clientname(const std::string& value) {
  
  _impl_.clientname_.Set(value, GetArenaForAllocation());
}
inline std::string* Vote::_internal_mutable_clientname() {
  
  return _impl_.clientname_.Mutable(GetArenaForAllocation());
}
inline std::string* Vote::release_clientname() {
  // @@protoc_insertion_point(field_release:Base.Vote.clientName)
  return _impl_.clientname_.Release();
}
inline void Vote::set_allocated_clientname(std::string* clientname) {
  if (clientname != nullptr) {
    
  } else {
    
  }
  _impl_.clientname_.SetAllocated(clientname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientname_.IsDefault()) {
    _impl_.clientname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.Vote.clientName)
}

// -------------------------------------------------------------------

// SyncData

// repeated .Base.Vote votes = 1;
inline int SyncData::_internal_votes_size() const {
  return _impl_.votes_.size();
}
inline int SyncData::votes_size() const {
  return _internal_votes_size();
}
inline void SyncData::clear_votes() {
  _impl_.votes_.Clear();
}
inline ::Base::Vote* SyncData::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:Base.SyncData.votes)
  return _impl_.votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::Vote >*
SyncData::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:Base.SyncData.votes)
  return &_impl_.votes_;
}
inline const ::Base::Vote& SyncData::_internal_votes(int index) const {
  return _impl_.votes_.Get(index);
}
inline const ::Base::Vote& SyncData::votes(int index) const {
  // @@protoc_insertion_point(field_get:Base.SyncData.votes)
  return _internal_votes(index);
}
inline ::Base::Vote* SyncData::_internal_add_votes() {
  return _impl_.votes_.Add();
}
inline ::Base::Vote* SyncData::add_votes() {
  ::Base::Vote* _add = _internal_add_votes();
  // @@protoc_insertion_point(field_add:Base.SyncData.votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::Vote >&
SyncData::votes() const {
  // @@protoc_insertion_point(field_list:Base.SyncData.votes)
  return _impl_.votes_;
}

// int32 remainingTime = 2;
inline void SyncData::clear_remainingtime() {
  _impl_.remainingtime_ = 0;
}
inline int32_t SyncData::_internal_remainingtime() const {
  return _impl_.remainingtime_;
}
inline int32_t SyncData::remainingtime() const {
  // @@protoc_insertion_point(field_get:Base.SyncData.remainingTime)
  return _internal_remainingtime();
}
inline void SyncData::_internal_set_remainingtime(int32_t value) {
  
  _impl_.remainingtime_ = value;
}
inline void SyncData::set_remainingtime(int32_t value) {
  _internal_set_remainingtime(value);
  // @@protoc_insertion_point(field_set:Base.SyncData.remainingTime)
}

// bool running = 3;
inline void SyncData::clear_running() {
  _impl_.running_ = false;
}
inline bool SyncData::_internal_running() const {
  return _impl_.running_;
}
inline bool SyncData::running() const {
  // @@protoc_insertion_point(field_get:Base.SyncData.running)
  return _internal_running();
}
inline void SyncData::_internal_set_running(bool value) {
  
  _impl_.running_ = value;
}
inline void SyncData::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:Base.SyncData.running)
}

// -------------------------------------------------------------------

// StartPlugin

// string pluginID = 1;
inline void StartPlugin::clear_pluginid() {
  _impl_.pluginid_.ClearToEmpty();
}
inline const std::string& StartPlugin::pluginid() const {
  // @@protoc_insertion_point(field_get:Base.StartPlugin.pluginID)
  return _internal_pluginid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartPlugin::set_pluginid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pluginid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.StartPlugin.pluginID)
}
inline std::string* StartPlugin::mutable_pluginid() {
  std::string* _s = _internal_mutable_pluginid();
  // @@protoc_insertion_point(field_mutable:Base.StartPlugin.pluginID)
  return _s;
}
inline const std::string& StartPlugin::_internal_pluginid() const {
  return _impl_.pluginid_.Get();
}
inline void StartPlugin::_internal_set_pluginid(const std::string& value) {
  
  _impl_.pluginid_.Set(value, GetArenaForAllocation());
}
inline std::string* StartPlugin::_internal_mutable_pluginid() {
  
  return _impl_.pluginid_.Mutable(GetArenaForAllocation());
}
inline std::string* StartPlugin::release_pluginid() {
  // @@protoc_insertion_point(field_release:Base.StartPlugin.pluginID)
  return _impl_.pluginid_.Release();
}
inline void StartPlugin::set_allocated_pluginid(std::string* pluginid) {
  if (pluginid != nullptr) {
    
  } else {
    
  }
  _impl_.pluginid_.SetAllocated(pluginid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pluginid_.IsDefault()) {
    _impl_.pluginid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.StartPlugin.pluginID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Base

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto
