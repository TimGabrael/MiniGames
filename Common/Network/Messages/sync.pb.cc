// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

#include "sync.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Base {
PROTOBUF_CONSTEXPR SyncResponse::SyncResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connectedclients_)*/{}
  , /*decltype(_impl_.availableplugins_)*/{}
  , /*decltype(_impl_.serverid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SyncResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncResponseDefaultTypeInternal() {}
  union {
    SyncResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncResponseDefaultTypeInternal _SyncResponse_default_instance_;
}  // namespace Base
static ::_pb::Metadata file_level_metadata_sync_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sync_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sync_2eproto = nullptr;

const uint32_t TableStruct_sync_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Base::SyncResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Base::SyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Base::SyncResponse, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::Base::SyncResponse, _impl_.connectedclients_),
  PROTOBUF_FIELD_OFFSET(::Base::SyncResponse, _impl_.availableplugins_),
  PROTOBUF_FIELD_OFFSET(::Base::SyncResponse, _impl_.state_),
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::Base::SyncResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Base::_SyncResponse_default_instance_._instance,
};

const char descriptor_table_protodef_sync_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nsync.proto\022\004Base\032\020ClientInfo.proto\"\204\001\n"
  "\014SyncResponse\022\020\n\010serverID\030\001 \001(\t\022*\n\020conne"
  "ctedClients\030\002 \003(\0132\020.Base.ClientInfo\022\030\n\020a"
  "vailablePlugins\030\003 \003(\t\022\022\n\005state\030\004 \001(\014H\000\210\001"
  "\001B\010\n\006_stateb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sync_2eproto_deps[1] = {
  &::descriptor_table_ClientInfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_sync_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sync_2eproto = {
    false, false, 179, descriptor_table_protodef_sync_2eproto,
    "sync.proto",
    &descriptor_table_sync_2eproto_once, descriptor_table_sync_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_sync_2eproto::offsets,
    file_level_metadata_sync_2eproto, file_level_enum_descriptors_sync_2eproto,
    file_level_service_descriptors_sync_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sync_2eproto_getter() {
  return &descriptor_table_sync_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sync_2eproto(&descriptor_table_sync_2eproto);
namespace Base {

// ===================================================================

class SyncResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncResponse>()._impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SyncResponse::clear_connectedclients() {
  _impl_.connectedclients_.Clear();
}
SyncResponse::SyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Base.SyncResponse)
}
SyncResponse::SyncResponse(const SyncResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SyncResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connectedclients_){from._impl_.connectedclients_}
    , decltype(_impl_.availableplugins_){from._impl_.availableplugins_}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serverid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    _this->_impl_.serverid_.Set(from._internal_serverid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_state()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Base.SyncResponse)
}

inline void SyncResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connectedclients_){arena}
    , decltype(_impl_.availableplugins_){arena}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.state_){}
  };
  _impl_.serverid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SyncResponse::~SyncResponse() {
  // @@protoc_insertion_point(destructor:Base.SyncResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connectedclients_.~RepeatedPtrField();
  _impl_.availableplugins_.~RepeatedPtrField();
  _impl_.serverid_.Destroy();
  _impl_.state_.Destroy();
}

void SyncResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Base.SyncResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connectedclients_.Clear();
  _impl_.availableplugins_.Clear();
  _impl_.serverid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.state_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serverID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serverid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Base.SyncResponse.serverID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .Base.ClientInfo connectedClients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connectedclients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string availablePlugins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_availableplugins();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Base.SyncResponse.availablePlugins"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Base.SyncResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serverID = 1;
  if (!this->_internal_serverid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverid().data(), static_cast<int>(this->_internal_serverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Base.SyncResponse.serverID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serverid(), target);
  }

  // repeated .Base.ClientInfo connectedClients = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connectedclients_size()); i < n; i++) {
    const auto& repfield = this->_internal_connectedclients(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string availablePlugins = 3;
  for (int i = 0, n = this->_internal_availableplugins_size(); i < n; i++) {
    const auto& s = this->_internal_availableplugins(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Base.SyncResponse.availablePlugins");
    target = stream->WriteString(3, s, target);
  }

  // optional bytes state = 4;
  if (_internal_has_state()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Base.SyncResponse)
  return target;
}

size_t SyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Base.SyncResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Base.ClientInfo connectedClients = 2;
  total_size += 1UL * this->_internal_connectedclients_size();
  for (const auto& msg : this->_impl_.connectedclients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string availablePlugins = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.availableplugins_.size());
  for (int i = 0, n = _impl_.availableplugins_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.availableplugins_.Get(i));
  }

  // string serverID = 1;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverid());
  }

  // optional bytes state = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SyncResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncResponse::GetClassData() const { return &_class_data_; }


void SyncResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SyncResponse*>(&to_msg);
  auto& from = static_cast<const SyncResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Base.SyncResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connectedclients_.MergeFrom(from._impl_.connectedclients_);
  _this->_impl_.availableplugins_.MergeFrom(from._impl_.availableplugins_);
  if (!from._internal_serverid().empty()) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_has_state()) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncResponse::CopyFrom(const SyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Base.SyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncResponse::IsInitialized() const {
  return true;
}

void SyncResponse::InternalSwap(SyncResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.connectedclients_.InternalSwap(&other->_impl_.connectedclients_);
  _impl_.availableplugins_.InternalSwap(&other->_impl_.availableplugins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverid_, lhs_arena,
      &other->_impl_.serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sync_2eproto_getter, &descriptor_table_sync_2eproto_once,
      file_level_metadata_sync_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Base
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Base::SyncResponse*
Arena::CreateMaybeMessage< ::Base::SyncResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Base::SyncResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
