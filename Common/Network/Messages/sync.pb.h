// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ClientInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sync_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sync_2eproto;
namespace Base {
class SyncResponse;
struct SyncResponseDefaultTypeInternal;
extern SyncResponseDefaultTypeInternal _SyncResponse_default_instance_;
}  // namespace Base
PROTOBUF_NAMESPACE_OPEN
template<> ::Base::SyncResponse* Arena::CreateMaybeMessage<::Base::SyncResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Base {

// ===================================================================

class SyncResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Base.SyncResponse) */ {
 public:
  inline SyncResponse() : SyncResponse(nullptr) {}
  ~SyncResponse() override;
  explicit PROTOBUF_CONSTEXPR SyncResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncResponse(const SyncResponse& from);
  SyncResponse(SyncResponse&& from) noexcept
    : SyncResponse() {
    *this = ::std::move(from);
  }

  inline SyncResponse& operator=(const SyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncResponse& operator=(SyncResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncResponse* internal_default_instance() {
    return reinterpret_cast<const SyncResponse*>(
               &_SyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncResponse& a, SyncResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncResponse& from) {
    SyncResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Base.SyncResponse";
  }
  protected:
  explicit SyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedClientsFieldNumber = 2,
    kAvailablePluginsFieldNumber = 3,
    kServerIDFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // repeated .Base.ClientInfo connectedClients = 2;
  int connectedclients_size() const;
  private:
  int _internal_connectedclients_size() const;
  public:
  void clear_connectedclients();
  ::Base::ClientInfo* mutable_connectedclients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::ClientInfo >*
      mutable_connectedclients();
  private:
  const ::Base::ClientInfo& _internal_connectedclients(int index) const;
  ::Base::ClientInfo* _internal_add_connectedclients();
  public:
  const ::Base::ClientInfo& connectedclients(int index) const;
  ::Base::ClientInfo* add_connectedclients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::ClientInfo >&
      connectedclients() const;

  // repeated string availablePlugins = 3;
  int availableplugins_size() const;
  private:
  int _internal_availableplugins_size() const;
  public:
  void clear_availableplugins();
  const std::string& availableplugins(int index) const;
  std::string* mutable_availableplugins(int index);
  void set_availableplugins(int index, const std::string& value);
  void set_availableplugins(int index, std::string&& value);
  void set_availableplugins(int index, const char* value);
  void set_availableplugins(int index, const char* value, size_t size);
  std::string* add_availableplugins();
  void add_availableplugins(const std::string& value);
  void add_availableplugins(std::string&& value);
  void add_availableplugins(const char* value);
  void add_availableplugins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& availableplugins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_availableplugins();
  private:
  const std::string& _internal_availableplugins(int index) const;
  std::string* _internal_add_availableplugins();
  public:

  // string serverID = 1;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // optional bytes state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:Base.SyncResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::ClientInfo > connectedclients_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> availableplugins_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncResponse

// string serverID = 1;
inline void SyncResponse::clear_serverid() {
  _impl_.serverid_.ClearToEmpty();
}
inline const std::string& SyncResponse::serverid() const {
  // @@protoc_insertion_point(field_get:Base.SyncResponse.serverID)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncResponse::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serverid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.SyncResponse.serverID)
}
inline std::string* SyncResponse::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:Base.SyncResponse.serverID)
  return _s;
}
inline const std::string& SyncResponse::_internal_serverid() const {
  return _impl_.serverid_.Get();
}
inline void SyncResponse::_internal_set_serverid(const std::string& value) {
  
  _impl_.serverid_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncResponse::_internal_mutable_serverid() {
  
  return _impl_.serverid_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncResponse::release_serverid() {
  // @@protoc_insertion_point(field_release:Base.SyncResponse.serverID)
  return _impl_.serverid_.Release();
}
inline void SyncResponse::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  _impl_.serverid_.SetAllocated(serverid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverid_.IsDefault()) {
    _impl_.serverid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.SyncResponse.serverID)
}

// repeated .Base.ClientInfo connectedClients = 2;
inline int SyncResponse::_internal_connectedclients_size() const {
  return _impl_.connectedclients_.size();
}
inline int SyncResponse::connectedclients_size() const {
  return _internal_connectedclients_size();
}
inline ::Base::ClientInfo* SyncResponse::mutable_connectedclients(int index) {
  // @@protoc_insertion_point(field_mutable:Base.SyncResponse.connectedClients)
  return _impl_.connectedclients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::ClientInfo >*
SyncResponse::mutable_connectedclients() {
  // @@protoc_insertion_point(field_mutable_list:Base.SyncResponse.connectedClients)
  return &_impl_.connectedclients_;
}
inline const ::Base::ClientInfo& SyncResponse::_internal_connectedclients(int index) const {
  return _impl_.connectedclients_.Get(index);
}
inline const ::Base::ClientInfo& SyncResponse::connectedclients(int index) const {
  // @@protoc_insertion_point(field_get:Base.SyncResponse.connectedClients)
  return _internal_connectedclients(index);
}
inline ::Base::ClientInfo* SyncResponse::_internal_add_connectedclients() {
  return _impl_.connectedclients_.Add();
}
inline ::Base::ClientInfo* SyncResponse::add_connectedclients() {
  ::Base::ClientInfo* _add = _internal_add_connectedclients();
  // @@protoc_insertion_point(field_add:Base.SyncResponse.connectedClients)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Base::ClientInfo >&
SyncResponse::connectedclients() const {
  // @@protoc_insertion_point(field_list:Base.SyncResponse.connectedClients)
  return _impl_.connectedclients_;
}

// repeated string availablePlugins = 3;
inline int SyncResponse::_internal_availableplugins_size() const {
  return _impl_.availableplugins_.size();
}
inline int SyncResponse::availableplugins_size() const {
  return _internal_availableplugins_size();
}
inline void SyncResponse::clear_availableplugins() {
  _impl_.availableplugins_.Clear();
}
inline std::string* SyncResponse::add_availableplugins() {
  std::string* _s = _internal_add_availableplugins();
  // @@protoc_insertion_point(field_add_mutable:Base.SyncResponse.availablePlugins)
  return _s;
}
inline const std::string& SyncResponse::_internal_availableplugins(int index) const {
  return _impl_.availableplugins_.Get(index);
}
inline const std::string& SyncResponse::availableplugins(int index) const {
  // @@protoc_insertion_point(field_get:Base.SyncResponse.availablePlugins)
  return _internal_availableplugins(index);
}
inline std::string* SyncResponse::mutable_availableplugins(int index) {
  // @@protoc_insertion_point(field_mutable:Base.SyncResponse.availablePlugins)
  return _impl_.availableplugins_.Mutable(index);
}
inline void SyncResponse::set_availableplugins(int index, const std::string& value) {
  _impl_.availableplugins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Base.SyncResponse.availablePlugins)
}
inline void SyncResponse::set_availableplugins(int index, std::string&& value) {
  _impl_.availableplugins_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Base.SyncResponse.availablePlugins)
}
inline void SyncResponse::set_availableplugins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.availableplugins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Base.SyncResponse.availablePlugins)
}
inline void SyncResponse::set_availableplugins(int index, const char* value, size_t size) {
  _impl_.availableplugins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Base.SyncResponse.availablePlugins)
}
inline std::string* SyncResponse::_internal_add_availableplugins() {
  return _impl_.availableplugins_.Add();
}
inline void SyncResponse::add_availableplugins(const std::string& value) {
  _impl_.availableplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Base.SyncResponse.availablePlugins)
}
inline void SyncResponse::add_availableplugins(std::string&& value) {
  _impl_.availableplugins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Base.SyncResponse.availablePlugins)
}
inline void SyncResponse::add_availableplugins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.availableplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Base.SyncResponse.availablePlugins)
}
inline void SyncResponse::add_availableplugins(const char* value, size_t size) {
  _impl_.availableplugins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Base.SyncResponse.availablePlugins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncResponse::availableplugins() const {
  // @@protoc_insertion_point(field_list:Base.SyncResponse.availablePlugins)
  return _impl_.availableplugins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncResponse::mutable_availableplugins() {
  // @@protoc_insertion_point(field_mutable_list:Base.SyncResponse.availablePlugins)
  return &_impl_.availableplugins_;
}

// optional bytes state = 4;
inline bool SyncResponse::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncResponse::has_state() const {
  return _internal_has_state();
}
inline void SyncResponse::clear_state() {
  _impl_.state_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncResponse::state() const {
  // @@protoc_insertion_point(field_get:Base.SyncResponse.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncResponse::set_state(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.state_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Base.SyncResponse.state)
}
inline std::string* SyncResponse::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Base.SyncResponse.state)
  return _s;
}
inline const std::string& SyncResponse::_internal_state() const {
  return _impl_.state_.Get();
}
inline void SyncResponse::_internal_set_state(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncResponse::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncResponse::release_state() {
  // @@protoc_insertion_point(field_release:Base.SyncResponse.state)
  if (!_internal_has_state()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SyncResponse::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.SyncResponse.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Base

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sync_2eproto
