// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseMessages.proto

#include "BaseMessages.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace base {
PROTOBUF_CONSTEXPR ClientData::ClientData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.is_admin_)*/false} {}
struct ClientDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDataDefaultTypeInternal() {}
  union {
    ClientData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDataDefaultTypeInternal _ClientData_default_instance_;
PROTOBUF_CONSTEXPR PluginData::PluginData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/0} {}
struct PluginDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PluginDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PluginDataDefaultTypeInternal() {}
  union {
    PluginData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PluginDataDefaultTypeInternal _PluginData_default_instance_;
PROTOBUF_CONSTEXPR ClientJoin::ClientJoin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ClientJoinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientJoinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientJoinDefaultTypeInternal() {}
  union {
    ClientJoin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientJoinDefaultTypeInternal _ClientJoin_default_instance_;
PROTOBUF_CONSTEXPR ClientState::ClientState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_session_id_)*/0
  , /*decltype(_impl_.state_)*/0} {}
struct ClientStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientStateDefaultTypeInternal() {}
  union {
    ClientState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientStateDefaultTypeInternal _ClientState_default_instance_;
PROTOBUF_CONSTEXPR ClientAdminKick::ClientAdminKick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0} {}
struct ClientAdminKickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientAdminKickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientAdminKickDefaultTypeInternal() {}
  union {
    ClientAdminKick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientAdminKickDefaultTypeInternal _ClientAdminKick_default_instance_;
PROTOBUF_CONSTEXPR ServerClientInfo::ServerClientInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.is_local_)*/false
  , /*decltype(_impl_.is_connected_)*/false} {}
struct ServerClientInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerClientInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerClientInfoDefaultTypeInternal() {}
  union {
    ServerClientInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerClientInfoDefaultTypeInternal _ServerClientInfo_default_instance_;
PROTOBUF_CONSTEXPR ServerPlugin::ServerPlugin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr} {}
struct ServerPluginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPluginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPluginDefaultTypeInternal() {}
  union {
    ServerPlugin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPluginDefaultTypeInternal _ServerPlugin_default_instance_;
PROTOBUF_CONSTEXPR ServerSetState::ServerSetState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_id_)*/0
  , /*decltype(_impl_.state_)*/0} {}
struct ServerSetStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerSetStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerSetStateDefaultTypeInternal() {}
  union {
    ServerSetState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerSetStateDefaultTypeInternal _ServerSetState_default_instance_;
PROTOBUF_CONSTEXPR ClientLobbyAdminTimer::ClientLobbyAdminTimer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_)*/0} {}
struct ClientLobbyAdminTimerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientLobbyAdminTimerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientLobbyAdminTimerDefaultTypeInternal() {}
  union {
    ClientLobbyAdminTimer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientLobbyAdminTimerDefaultTypeInternal _ClientLobbyAdminTimer_default_instance_;
PROTOBUF_CONSTEXPR ClientLobbyVote::ClientLobbyVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.plugin_id_)*/0} {}
struct ClientLobbyVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientLobbyVoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientLobbyVoteDefaultTypeInternal() {}
  union {
    ClientLobbyVote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientLobbyVoteDefaultTypeInternal _ClientLobbyVote_default_instance_;
PROTOBUF_CONSTEXPR ServerLobbyTimer::ServerLobbyTimer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_)*/0} {}
struct ServerLobbyTimerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerLobbyTimerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerLobbyTimerDefaultTypeInternal() {}
  union {
    ServerLobbyTimer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerLobbyTimerDefaultTypeInternal _ServerLobbyTimer_default_instance_;
PROTOBUF_CONSTEXPR ServerLobbyVote::ServerLobbyVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_id_)*/0
  , /*decltype(_impl_.plugin_id_)*/0} {}
struct ServerLobbyVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerLobbyVoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerLobbyVoteDefaultTypeInternal() {}
  union {
    ServerLobbyVote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerLobbyVoteDefaultTypeInternal _ServerLobbyVote_default_instance_;
}  // namespace base
static ::_pb::Metadata file_level_metadata_BaseMessages_2eproto[12];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_BaseMessages_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_BaseMessages_2eproto = nullptr;
const ::uint32_t TableStruct_BaseMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::base::ClientData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ClientData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ClientData, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::base::ClientData, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::base::ClientData, _impl_.is_admin_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::base::PluginData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::PluginData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::PluginData, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::base::PluginData, _impl_.session_id_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::base::ClientJoin, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ClientJoin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ClientJoin, _impl_.name_),
    0,
    PROTOBUF_FIELD_OFFSET(::base::ClientState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ClientState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ClientState, _impl_.plugin_session_id_),
    PROTOBUF_FIELD_OFFSET(::base::ClientState, _impl_.state_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::base::ClientAdminKick, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ClientAdminKick, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ClientAdminKick, _impl_.id_),
    0,
    PROTOBUF_FIELD_OFFSET(::base::ServerClientInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ServerClientInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ServerClientInfo, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::base::ServerClientInfo, _impl_.is_local_),
    PROTOBUF_FIELD_OFFSET(::base::ServerClientInfo, _impl_.is_connected_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::base::ServerPlugin, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ServerPlugin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ServerPlugin, _impl_.data_),
    0,
    PROTOBUF_FIELD_OFFSET(::base::ServerSetState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ServerSetState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ServerSetState, _impl_.plugin_id_),
    PROTOBUF_FIELD_OFFSET(::base::ServerSetState, _impl_.state_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::base::ClientLobbyAdminTimer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ClientLobbyAdminTimer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ClientLobbyAdminTimer, _impl_.time_),
    0,
    PROTOBUF_FIELD_OFFSET(::base::ClientLobbyVote, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ClientLobbyVote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ClientLobbyVote, _impl_.plugin_id_),
    0,
    PROTOBUF_FIELD_OFFSET(::base::ServerLobbyTimer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ServerLobbyTimer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ServerLobbyTimer, _impl_.time_),
    0,
    PROTOBUF_FIELD_OFFSET(::base::ServerLobbyVote, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::base::ServerLobbyVote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::base::ServerLobbyVote, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::base::ServerLobbyVote, _impl_.plugin_id_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::base::ClientData)},
        { 14, 24, -1, sizeof(::base::PluginData)},
        { 26, 35, -1, sizeof(::base::ClientJoin)},
        { 36, 46, -1, sizeof(::base::ClientState)},
        { 48, 57, -1, sizeof(::base::ClientAdminKick)},
        { 58, 69, -1, sizeof(::base::ServerClientInfo)},
        { 72, 81, -1, sizeof(::base::ServerPlugin)},
        { 82, 92, -1, sizeof(::base::ServerSetState)},
        { 94, 103, -1, sizeof(::base::ClientLobbyAdminTimer)},
        { 104, 113, -1, sizeof(::base::ClientLobbyVote)},
        { 114, 123, -1, sizeof(::base::ServerLobbyTimer)},
        { 124, 134, -1, sizeof(::base::ServerLobbyVote)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::base::_ClientData_default_instance_._instance,
    &::base::_PluginData_default_instance_._instance,
    &::base::_ClientJoin_default_instance_._instance,
    &::base::_ClientState_default_instance_._instance,
    &::base::_ClientAdminKick_default_instance_._instance,
    &::base::_ServerClientInfo_default_instance_._instance,
    &::base::_ServerPlugin_default_instance_._instance,
    &::base::_ServerSetState_default_instance_._instance,
    &::base::_ClientLobbyAdminTimer_default_instance_._instance,
    &::base::_ClientLobbyVote_default_instance_._instance,
    &::base::_ServerLobbyTimer_default_instance_._instance,
    &::base::_ServerLobbyVote_default_instance_._instance,
};
const char descriptor_table_protodef_BaseMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022BaseMessages.proto\022\004base\"8\n\nClientData"
    "\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\020\n\010is_admin\030\003"
    " \002(\010\",\n\nPluginData\022\n\n\002id\030\001 \002(\t\022\022\n\nsessio"
    "n_id\030\002 \002(\005\"\032\n\nClientJoin\022\014\n\004name\030\001 \002(\t\"7"
    "\n\013ClientState\022\031\n\021plugin_session_id\030\001 \001(\005"
    "\022\r\n\005state\030\002 \002(\005\"\035\n\017ClientAdminKick\022\n\n\002id"
    "\030\001 \002(\005\"Z\n\020ServerClientInfo\022\036\n\004data\030\001 \002(\013"
    "2\020.base.ClientData\022\020\n\010is_local\030\002 \002(\010\022\024\n\014"
    "is_connected\030\003 \002(\010\".\n\014ServerPlugin\022\036\n\004da"
    "ta\030\001 \002(\0132\020.base.PluginData\"2\n\016ServerSetS"
    "tate\022\021\n\tplugin_id\030\001 \001(\005\022\r\n\005state\030\002 \002(\005\"%"
    "\n\025ClientLobbyAdminTimer\022\014\n\004time\030\001 \002(\002\"$\n"
    "\017ClientLobbyVote\022\021\n\tplugin_id\030\001 \002(\005\" \n\020S"
    "erverLobbyTimer\022\014\n\004time\030\001 \002(\002\"7\n\017ServerL"
    "obbyVote\022\021\n\tclient_id\030\001 \002(\005\022\021\n\tplugin_id"
    "\030\002 \002(\005"
};
static ::absl::once_flag descriptor_table_BaseMessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_BaseMessages_2eproto = {
    false,
    false,
    606,
    descriptor_table_protodef_BaseMessages_2eproto,
    "BaseMessages.proto",
    &descriptor_table_BaseMessages_2eproto_once,
    nullptr,
    0,
    12,
    schemas,
    file_default_instances,
    TableStruct_BaseMessages_2eproto::offsets,
    file_level_metadata_BaseMessages_2eproto,
    file_level_enum_descriptors_BaseMessages_2eproto,
    file_level_service_descriptors_BaseMessages_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_BaseMessages_2eproto_getter() {
  return &descriptor_table_BaseMessages_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_BaseMessages_2eproto(&descriptor_table_BaseMessages_2eproto);
namespace base {
// ===================================================================

class ClientData::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientData, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_admin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ClientData::ClientData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ClientData)
}
ClientData::ClientData(const ClientData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.is_admin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_admin_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_admin_));
  // @@protoc_insertion_point(copy_constructor:base.ClientData)
}

inline void ClientData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.is_admin_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientData::~ClientData() {
  // @@protoc_insertion_point(destructor:base.ClientData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientData::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ClientData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientData::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ClientData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_admin_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_admin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "base.ClientData.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool is_admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_is_admin(&has_bits);
          _impl_.is_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ClientData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "base.ClientData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // required bool is_admin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ClientData)
  return target;
}

::size_t ClientData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:base.ClientData)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required bool is_admin = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
::size_t ClientData::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ClientData)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());

    // required bool is_admin = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientData::GetClassData() const { return &_class_data_; }


void ClientData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientData*>(&to_msg);
  auto& from = static_cast<const ClientData&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ClientData)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_admin_ = from._impl_.is_admin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientData::CopyFrom(const ClientData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ClientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ClientData::InternalSwap(ClientData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientData, _impl_.is_admin_)
      + sizeof(ClientData::_impl_.is_admin_)
      - PROTOBUF_FIELD_OFFSET(ClientData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientData::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[0]);
}
// ===================================================================

class PluginData::_Internal {
 public:
  using HasBits = decltype(std::declval<PluginData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PluginData, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PluginData::PluginData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.PluginData)
}
PluginData::PluginData(const PluginData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PluginData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.session_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.session_id_ = from._impl_.session_id_;
  // @@protoc_insertion_point(copy_constructor:base.PluginData)
}

inline void PluginData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.session_id_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PluginData::~PluginData() {
  // @@protoc_insertion_point(destructor:base.PluginData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PluginData::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void PluginData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PluginData::Clear() {
// @@protoc_insertion_point(message_clear_start:base.PluginData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_.session_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PluginData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "base.PluginData.id");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_session_id(&has_bits);
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PluginData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.PluginData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "base.PluginData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required int32 session_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.PluginData)
  return target;
}

::size_t PluginData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:base.PluginData)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 session_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());
  }

  return total_size;
}
::size_t PluginData::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.PluginData)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required int32 session_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PluginData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PluginData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PluginData::GetClassData() const { return &_class_data_; }


void PluginData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PluginData*>(&to_msg);
  auto& from = static_cast<const PluginData&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.PluginData)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.session_id_ = from._impl_.session_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PluginData::CopyFrom(const PluginData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.PluginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PluginData::InternalSwap(PluginData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.session_id_, other->_impl_.session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PluginData::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[1]);
}
// ===================================================================

class ClientJoin::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientJoin>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientJoin, _impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientJoin::ClientJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ClientJoin)
}
ClientJoin::ClientJoin(const ClientJoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientJoin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:base.ClientJoin)
}

inline void ClientJoin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientJoin::~ClientJoin() {
  // @@protoc_insertion_point(destructor:base.ClientJoin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientJoin::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ClientJoin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ClientJoin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientJoin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "base.ClientJoin.name");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientJoin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ClientJoin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "base.ClientJoin.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ClientJoin)
  return target;
}

::size_t ClientJoin::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ClientJoin)
  ::size_t total_size = 0;

  // required string name = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientJoin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientJoin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientJoin::GetClassData() const { return &_class_data_; }


void ClientJoin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientJoin*>(&to_msg);
  auto& from = static_cast<const ClientJoin&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ClientJoin)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientJoin::CopyFrom(const ClientJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ClientJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientJoin::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ClientJoin::InternalSwap(ClientJoin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientJoin::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[2]);
}
// ===================================================================

class ClientState::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientState, _impl_._has_bits_);
  static void set_has_plugin_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ClientState::ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ClientState)
}
ClientState::ClientState(const ClientState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.ClientState)
}

inline void ClientState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_session_id_){0}
    , decltype(_impl_.state_){0}
  };
}

ClientState::~ClientState() {
  // @@protoc_insertion_point(destructor:base.ClientState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientState::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientState::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ClientState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.plugin_session_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.plugin_session_id_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 plugin_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_plugin_session_id(&has_bits);
          _impl_.plugin_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ClientState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 plugin_session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_plugin_session_id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ClientState)
  return target;
}

::size_t ClientState::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ClientState)
  ::size_t total_size = 0;

  // required int32 state = 2;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 plugin_session_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plugin_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientState::GetClassData() const { return &_class_data_; }


void ClientState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientState*>(&to_msg);
  auto& from = static_cast<const ClientState&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ClientState)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.plugin_session_id_ = from._impl_.plugin_session_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientState::CopyFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ClientState::InternalSwap(ClientState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientState, _impl_.state_)
      + sizeof(ClientState::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ClientState, _impl_.plugin_session_id_)>(
          reinterpret_cast<char*>(&_impl_.plugin_session_id_),
          reinterpret_cast<char*>(&other->_impl_.plugin_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientState::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[3]);
}
// ===================================================================

class ClientAdminKick::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientAdminKick>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientAdminKick, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientAdminKick::ClientAdminKick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ClientAdminKick)
}
ClientAdminKick::ClientAdminKick(const ClientAdminKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.ClientAdminKick)
}

inline void ClientAdminKick::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0}
  };
}

ClientAdminKick::~ClientAdminKick() {
  // @@protoc_insertion_point(destructor:base.ClientAdminKick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientAdminKick::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientAdminKick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientAdminKick::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ClientAdminKick)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientAdminKick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientAdminKick::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ClientAdminKick)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ClientAdminKick)
  return target;
}

::size_t ClientAdminKick::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ClientAdminKick)
  ::size_t total_size = 0;

  // required int32 id = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientAdminKick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientAdminKick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientAdminKick::GetClassData() const { return &_class_data_; }


void ClientAdminKick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientAdminKick*>(&to_msg);
  auto& from = static_cast<const ClientAdminKick&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ClientAdminKick)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientAdminKick::CopyFrom(const ClientAdminKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ClientAdminKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientAdminKick::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ClientAdminKick::InternalSwap(ClientAdminKick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientAdminKick::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[4]);
}
// ===================================================================

class ServerClientInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerClientInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerClientInfo, _impl_._has_bits_);
  static const ::base::ClientData& data(const ServerClientInfo* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_local(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::base::ClientData&
ServerClientInfo::_Internal::data(const ServerClientInfo* msg) {
  return *msg->_impl_.data_;
}
ServerClientInfo::ServerClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ServerClientInfo)
}
ServerClientInfo::ServerClientInfo(const ServerClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerClientInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.is_local_){}
    , decltype(_impl_.is_connected_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::base::ClientData(*from._impl_.data_);
  }
  ::memcpy(&_impl_.is_local_, &from._impl_.is_local_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_connected_) -
    reinterpret_cast<char*>(&_impl_.is_local_)) + sizeof(_impl_.is_connected_));
  // @@protoc_insertion_point(copy_constructor:base.ServerClientInfo)
}

inline void ServerClientInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.is_local_){false}
    , decltype(_impl_.is_connected_){false}
  };
}

ServerClientInfo::~ServerClientInfo() {
  // @@protoc_insertion_point(destructor:base.ServerClientInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerClientInfo::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void ServerClientInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ServerClientInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  ::memset(&_impl_.is_local_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_connected_) -
      reinterpret_cast<char*>(&_impl_.is_local_)) + sizeof(_impl_.is_connected_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerClientInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .base.ClientData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool is_local = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_is_local(&has_bits);
          _impl_.is_local_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bool is_connected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_is_connected(&has_bits);
          _impl_.is_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerClientInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ServerClientInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .base.ClientData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // required bool is_local = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_local(), target);
  }

  // required bool is_connected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_connected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ServerClientInfo)
  return target;
}

::size_t ServerClientInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:base.ServerClientInfo)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required .base.ClientData data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required bool is_local = 2;
    total_size += 1 + 1;
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required bool is_connected = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
::size_t ServerClientInfo::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ServerClientInfo)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .base.ClientData data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);

    // required bool is_local = 2;
    total_size += 1 + 1;

    // required bool is_connected = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerClientInfo::GetClassData() const { return &_class_data_; }


void ServerClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerClientInfo*>(&to_msg);
  auto& from = static_cast<const ServerClientInfo&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ServerClientInfo)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::base::ClientData::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_local_ = from._impl_.is_local_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_connected_ = from._impl_.is_connected_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerClientInfo::CopyFrom(const ServerClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ServerClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerClientInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.data_->IsInitialized()) return false;
  }
  return true;
}

void ServerClientInfo::InternalSwap(ServerClientInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerClientInfo, _impl_.is_connected_)
      + sizeof(ServerClientInfo::_impl_.is_connected_)
      - PROTOBUF_FIELD_OFFSET(ServerClientInfo, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerClientInfo::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[5]);
}
// ===================================================================

class ServerPlugin::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerPlugin>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerPlugin, _impl_._has_bits_);
  static const ::base::PluginData& data(const ServerPlugin* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::base::PluginData&
ServerPlugin::_Internal::data(const ServerPlugin* msg) {
  return *msg->_impl_.data_;
}
ServerPlugin::ServerPlugin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ServerPlugin)
}
ServerPlugin::ServerPlugin(const ServerPlugin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPlugin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::base::PluginData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:base.ServerPlugin)
}

inline void ServerPlugin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
  };
}

ServerPlugin::~ServerPlugin() {
  // @@protoc_insertion_point(destructor:base.ServerPlugin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPlugin::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void ServerPlugin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPlugin::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ServerPlugin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPlugin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .base.PluginData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerPlugin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ServerPlugin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .base.PluginData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ServerPlugin)
  return target;
}

::size_t ServerPlugin::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ServerPlugin)
  ::size_t total_size = 0;

  // required .base.PluginData data = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPlugin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPlugin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPlugin::GetClassData() const { return &_class_data_; }


void ServerPlugin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPlugin*>(&to_msg);
  auto& from = static_cast<const ServerPlugin&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ServerPlugin)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::base::PluginData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPlugin::CopyFrom(const ServerPlugin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ServerPlugin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPlugin::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.data_->IsInitialized()) return false;
  }
  return true;
}

void ServerPlugin::InternalSwap(ServerPlugin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPlugin::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[6]);
}
// ===================================================================

class ServerSetState::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerSetState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerSetState, _impl_._has_bits_);
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ServerSetState::ServerSetState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ServerSetState)
}
ServerSetState::ServerSetState(const ServerSetState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.ServerSetState)
}

inline void ServerSetState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_id_){0}
    , decltype(_impl_.state_){0}
  };
}

ServerSetState::~ServerSetState() {
  // @@protoc_insertion_point(destructor:base.ServerSetState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerSetState::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerSetState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerSetState::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ServerSetState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.plugin_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.plugin_id_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerSetState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 plugin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_plugin_id(&has_bits);
          _impl_.plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerSetState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ServerSetState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 plugin_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_plugin_id(), target);
  }

  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ServerSetState)
  return target;
}

::size_t ServerSetState::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ServerSetState)
  ::size_t total_size = 0;

  // required int32 state = 2;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 plugin_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plugin_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerSetState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerSetState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerSetState::GetClassData() const { return &_class_data_; }


void ServerSetState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerSetState*>(&to_msg);
  auto& from = static_cast<const ServerSetState&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ServerSetState)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.plugin_id_ = from._impl_.plugin_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerSetState::CopyFrom(const ServerSetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ServerSetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSetState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ServerSetState::InternalSwap(ServerSetState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerSetState, _impl_.state_)
      + sizeof(ServerSetState::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ServerSetState, _impl_.plugin_id_)>(
          reinterpret_cast<char*>(&_impl_.plugin_id_),
          reinterpret_cast<char*>(&other->_impl_.plugin_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerSetState::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[7]);
}
// ===================================================================

class ClientLobbyAdminTimer::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientLobbyAdminTimer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientLobbyAdminTimer, _impl_._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientLobbyAdminTimer::ClientLobbyAdminTimer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ClientLobbyAdminTimer)
}
ClientLobbyAdminTimer::ClientLobbyAdminTimer(const ClientLobbyAdminTimer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.ClientLobbyAdminTimer)
}

inline void ClientLobbyAdminTimer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_){0}
  };
}

ClientLobbyAdminTimer::~ClientLobbyAdminTimer() {
  // @@protoc_insertion_point(destructor:base.ClientLobbyAdminTimer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientLobbyAdminTimer::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientLobbyAdminTimer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientLobbyAdminTimer::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ClientLobbyAdminTimer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientLobbyAdminTimer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientLobbyAdminTimer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ClientLobbyAdminTimer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ClientLobbyAdminTimer)
  return target;
}

::size_t ClientLobbyAdminTimer::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ClientLobbyAdminTimer)
  ::size_t total_size = 0;

  // required float time = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 + 4;
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientLobbyAdminTimer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientLobbyAdminTimer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientLobbyAdminTimer::GetClassData() const { return &_class_data_; }


void ClientLobbyAdminTimer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientLobbyAdminTimer*>(&to_msg);
  auto& from = static_cast<const ClientLobbyAdminTimer&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ClientLobbyAdminTimer)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientLobbyAdminTimer::CopyFrom(const ClientLobbyAdminTimer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ClientLobbyAdminTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLobbyAdminTimer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ClientLobbyAdminTimer::InternalSwap(ClientLobbyAdminTimer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientLobbyAdminTimer::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[8]);
}
// ===================================================================

class ClientLobbyVote::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientLobbyVote>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientLobbyVote, _impl_._has_bits_);
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientLobbyVote::ClientLobbyVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ClientLobbyVote)
}
ClientLobbyVote::ClientLobbyVote(const ClientLobbyVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.ClientLobbyVote)
}

inline void ClientLobbyVote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.plugin_id_){0}
  };
}

ClientLobbyVote::~ClientLobbyVote() {
  // @@protoc_insertion_point(destructor:base.ClientLobbyVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientLobbyVote::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientLobbyVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientLobbyVote::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ClientLobbyVote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plugin_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientLobbyVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 plugin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_plugin_id(&has_bits);
          _impl_.plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientLobbyVote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ClientLobbyVote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 plugin_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_plugin_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ClientLobbyVote)
  return target;
}

::size_t ClientLobbyVote::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ClientLobbyVote)
  ::size_t total_size = 0;

  // required int32 plugin_id = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plugin_id());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientLobbyVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientLobbyVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientLobbyVote::GetClassData() const { return &_class_data_; }


void ClientLobbyVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientLobbyVote*>(&to_msg);
  auto& from = static_cast<const ClientLobbyVote&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ClientLobbyVote)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_plugin_id(from._internal_plugin_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientLobbyVote::CopyFrom(const ClientLobbyVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ClientLobbyVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLobbyVote::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ClientLobbyVote::InternalSwap(ClientLobbyVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.plugin_id_, other->_impl_.plugin_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientLobbyVote::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[9]);
}
// ===================================================================

class ServerLobbyTimer::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerLobbyTimer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerLobbyTimer, _impl_._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ServerLobbyTimer::ServerLobbyTimer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ServerLobbyTimer)
}
ServerLobbyTimer::ServerLobbyTimer(const ServerLobbyTimer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.ServerLobbyTimer)
}

inline void ServerLobbyTimer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_){0}
  };
}

ServerLobbyTimer::~ServerLobbyTimer() {
  // @@protoc_insertion_point(destructor:base.ServerLobbyTimer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerLobbyTimer::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerLobbyTimer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerLobbyTimer::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ServerLobbyTimer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerLobbyTimer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerLobbyTimer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ServerLobbyTimer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ServerLobbyTimer)
  return target;
}

::size_t ServerLobbyTimer::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ServerLobbyTimer)
  ::size_t total_size = 0;

  // required float time = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 + 4;
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerLobbyTimer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerLobbyTimer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerLobbyTimer::GetClassData() const { return &_class_data_; }


void ServerLobbyTimer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerLobbyTimer*>(&to_msg);
  auto& from = static_cast<const ServerLobbyTimer&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ServerLobbyTimer)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerLobbyTimer::CopyFrom(const ServerLobbyTimer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ServerLobbyTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLobbyTimer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ServerLobbyTimer::InternalSwap(ServerLobbyTimer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerLobbyTimer::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[10]);
}
// ===================================================================

class ServerLobbyVote::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerLobbyVote>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerLobbyVote, _impl_._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_plugin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ServerLobbyVote::ServerLobbyVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:base.ServerLobbyVote)
}
ServerLobbyVote::ServerLobbyVote(const ServerLobbyVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.ServerLobbyVote)
}

inline void ServerLobbyVote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_){0}
    , decltype(_impl_.plugin_id_){0}
  };
}

ServerLobbyVote::~ServerLobbyVote() {
  // @@protoc_insertion_point(destructor:base.ServerLobbyVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerLobbyVote::SharedDtor() {
  GOOGLE_ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerLobbyVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerLobbyVote::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ServerLobbyVote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.client_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.plugin_id_) -
        reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.plugin_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerLobbyVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_client_id(&has_bits);
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required int32 plugin_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_plugin_id(&has_bits);
          _impl_.plugin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerLobbyVote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:base.ServerLobbyVote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // required int32 plugin_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_plugin_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ServerLobbyVote)
  return target;
}

::size_t ServerLobbyVote::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:base.ServerLobbyVote)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required int32 client_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required int32 plugin_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plugin_id());
  }

  return total_size;
}
::size_t ServerLobbyVote::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:base.ServerLobbyVote)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 client_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());

    // required int32 plugin_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plugin_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerLobbyVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerLobbyVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerLobbyVote::GetClassData() const { return &_class_data_; }


void ServerLobbyVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerLobbyVote*>(&to_msg);
  auto& from = static_cast<const ServerLobbyVote&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:base.ServerLobbyVote)
  GOOGLE_ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.client_id_ = from._impl_.client_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.plugin_id_ = from._impl_.plugin_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerLobbyVote::CopyFrom(const ServerLobbyVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ServerLobbyVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLobbyVote::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ServerLobbyVote::InternalSwap(ServerLobbyVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerLobbyVote, _impl_.plugin_id_)
      + sizeof(ServerLobbyVote::_impl_.plugin_id_)
      - PROTOBUF_FIELD_OFFSET(ServerLobbyVote, _impl_.client_id_)>(
          reinterpret_cast<char*>(&_impl_.client_id_),
          reinterpret_cast<char*>(&other->_impl_.client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerLobbyVote::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_BaseMessages_2eproto_getter, &descriptor_table_BaseMessages_2eproto_once,
      file_level_metadata_BaseMessages_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace base
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::base::ClientData*
Arena::CreateMaybeMessage< ::base::ClientData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ClientData >(arena);
}
template<> PROTOBUF_NOINLINE ::base::PluginData*
Arena::CreateMaybeMessage< ::base::PluginData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::PluginData >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ClientJoin*
Arena::CreateMaybeMessage< ::base::ClientJoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ClientJoin >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ClientState*
Arena::CreateMaybeMessage< ::base::ClientState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ClientState >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ClientAdminKick*
Arena::CreateMaybeMessage< ::base::ClientAdminKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ClientAdminKick >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ServerClientInfo*
Arena::CreateMaybeMessage< ::base::ServerClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ServerClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ServerPlugin*
Arena::CreateMaybeMessage< ::base::ServerPlugin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ServerPlugin >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ServerSetState*
Arena::CreateMaybeMessage< ::base::ServerSetState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ServerSetState >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ClientLobbyAdminTimer*
Arena::CreateMaybeMessage< ::base::ClientLobbyAdminTimer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ClientLobbyAdminTimer >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ClientLobbyVote*
Arena::CreateMaybeMessage< ::base::ClientLobbyVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ClientLobbyVote >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ServerLobbyTimer*
Arena::CreateMaybeMessage< ::base::ServerLobbyTimer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ServerLobbyTimer >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ServerLobbyVote*
Arena::CreateMaybeMessage< ::base::ServerLobbyVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ServerLobbyVote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
