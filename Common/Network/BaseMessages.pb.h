// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BaseMessages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_BaseMessages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 3021010 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_BaseMessages_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BaseMessages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_BaseMessages_2eproto;
namespace base {
class ClientAdminKick;
struct ClientAdminKickDefaultTypeInternal;
extern ClientAdminKickDefaultTypeInternal _ClientAdminKick_default_instance_;
class ClientData;
struct ClientDataDefaultTypeInternal;
extern ClientDataDefaultTypeInternal _ClientData_default_instance_;
class ClientJoin;
struct ClientJoinDefaultTypeInternal;
extern ClientJoinDefaultTypeInternal _ClientJoin_default_instance_;
class ClientLobbyAdminTimer;
struct ClientLobbyAdminTimerDefaultTypeInternal;
extern ClientLobbyAdminTimerDefaultTypeInternal _ClientLobbyAdminTimer_default_instance_;
class ClientLobbyVote;
struct ClientLobbyVoteDefaultTypeInternal;
extern ClientLobbyVoteDefaultTypeInternal _ClientLobbyVote_default_instance_;
class ClientState;
struct ClientStateDefaultTypeInternal;
extern ClientStateDefaultTypeInternal _ClientState_default_instance_;
class PluginData;
struct PluginDataDefaultTypeInternal;
extern PluginDataDefaultTypeInternal _PluginData_default_instance_;
class ServerClientInfo;
struct ServerClientInfoDefaultTypeInternal;
extern ServerClientInfoDefaultTypeInternal _ServerClientInfo_default_instance_;
class ServerLobbyTimer;
struct ServerLobbyTimerDefaultTypeInternal;
extern ServerLobbyTimerDefaultTypeInternal _ServerLobbyTimer_default_instance_;
class ServerLobbyVote;
struct ServerLobbyVoteDefaultTypeInternal;
extern ServerLobbyVoteDefaultTypeInternal _ServerLobbyVote_default_instance_;
class ServerPlugin;
struct ServerPluginDefaultTypeInternal;
extern ServerPluginDefaultTypeInternal _ServerPlugin_default_instance_;
class ServerSetState;
struct ServerSetStateDefaultTypeInternal;
extern ServerSetStateDefaultTypeInternal _ServerSetState_default_instance_;
}  // namespace base
PROTOBUF_NAMESPACE_OPEN
template <>
::base::ClientAdminKick* Arena::CreateMaybeMessage<::base::ClientAdminKick>(Arena*);
template <>
::base::ClientData* Arena::CreateMaybeMessage<::base::ClientData>(Arena*);
template <>
::base::ClientJoin* Arena::CreateMaybeMessage<::base::ClientJoin>(Arena*);
template <>
::base::ClientLobbyAdminTimer* Arena::CreateMaybeMessage<::base::ClientLobbyAdminTimer>(Arena*);
template <>
::base::ClientLobbyVote* Arena::CreateMaybeMessage<::base::ClientLobbyVote>(Arena*);
template <>
::base::ClientState* Arena::CreateMaybeMessage<::base::ClientState>(Arena*);
template <>
::base::PluginData* Arena::CreateMaybeMessage<::base::PluginData>(Arena*);
template <>
::base::ServerClientInfo* Arena::CreateMaybeMessage<::base::ServerClientInfo>(Arena*);
template <>
::base::ServerLobbyTimer* Arena::CreateMaybeMessage<::base::ServerLobbyTimer>(Arena*);
template <>
::base::ServerLobbyVote* Arena::CreateMaybeMessage<::base::ServerLobbyVote>(Arena*);
template <>
::base::ServerPlugin* Arena::CreateMaybeMessage<::base::ServerPlugin>(Arena*);
template <>
::base::ServerSetState* Arena::CreateMaybeMessage<::base::ServerSetState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace base {

// ===================================================================


// -------------------------------------------------------------------

class ClientData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ClientData) */ {
 public:
  inline ClientData() : ClientData(nullptr) {}
  ~ClientData() override;
  explicit PROTOBUF_CONSTEXPR ClientData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientData(const ClientData& from);
  ClientData(ClientData&& from) noexcept
    : ClientData() {
    *this = ::std::move(from);
  }

  inline ClientData& operator=(const ClientData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientData& operator=(ClientData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientData* internal_default_instance() {
    return reinterpret_cast<const ClientData*>(
               &_ClientData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientData& a, ClientData& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientData* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientData& from) {
    ClientData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ClientData";
  }
  protected:
  explicit ClientData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kIsAdminFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:
  // required int32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);
  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);
  public:
  // required bool is_admin = 3;
  bool has_is_admin() const;
  void clear_is_admin() ;
  bool is_admin() const;
  void set_is_admin(bool value);
  private:
  bool _internal_is_admin() const;
  void _internal_set_is_admin(bool value);
  public:
  // @@protoc_insertion_point(class_scope:base.ClientData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int32_t id_;
    bool is_admin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class PluginData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.PluginData) */ {
 public:
  inline PluginData() : PluginData(nullptr) {}
  ~PluginData() override;
  explicit PROTOBUF_CONSTEXPR PluginData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PluginData(const PluginData& from);
  PluginData(PluginData&& from) noexcept
    : PluginData() {
    *this = ::std::move(from);
  }

  inline PluginData& operator=(const PluginData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginData& operator=(PluginData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PluginData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PluginData* internal_default_instance() {
    return reinterpret_cast<const PluginData*>(
               &_PluginData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PluginData& a, PluginData& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginData* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PluginData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PluginData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PluginData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PluginData& from) {
    PluginData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.PluginData";
  }
  protected:
  explicit PluginData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
  };
  // required string id = 1;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:
  // required int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id() ;
  ::int32_t session_id() const;
  void set_session_id(::int32_t value);
  private:
  ::int32_t _internal_session_id() const;
  void _internal_set_session_id(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:base.PluginData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::int32_t session_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ClientJoin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ClientJoin) */ {
 public:
  inline ClientJoin() : ClientJoin(nullptr) {}
  ~ClientJoin() override;
  explicit PROTOBUF_CONSTEXPR ClientJoin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientJoin(const ClientJoin& from);
  ClientJoin(ClientJoin&& from) noexcept
    : ClientJoin() {
    *this = ::std::move(from);
  }

  inline ClientJoin& operator=(const ClientJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientJoin& operator=(ClientJoin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientJoin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientJoin* internal_default_instance() {
    return reinterpret_cast<const ClientJoin*>(
               &_ClientJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientJoin& a, ClientJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientJoin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientJoin* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientJoin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientJoin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientJoin& from) {
    ClientJoin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientJoin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ClientJoin";
  }
  protected:
  explicit ClientJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:
  // @@protoc_insertion_point(class_scope:base.ClientJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ClientState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ClientState) */ {
 public:
  inline ClientState() : ClientState(nullptr) {}
  ~ClientState() override;
  explicit PROTOBUF_CONSTEXPR ClientState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientState(const ClientState& from);
  ClientState(ClientState&& from) noexcept
    : ClientState() {
    *this = ::std::move(from);
  }

  inline ClientState& operator=(const ClientState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientState& operator=(ClientState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientState* internal_default_instance() {
    return reinterpret_cast<const ClientState*>(
               &_ClientState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientState& a, ClientState& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientState* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientState& from) {
    ClientState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ClientState";
  }
  protected:
  explicit ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginSessionIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional int32 plugin_session_id = 1;
  bool has_plugin_session_id() const;
  void clear_plugin_session_id() ;
  ::int32_t plugin_session_id() const;
  void set_plugin_session_id(::int32_t value);
  private:
  ::int32_t _internal_plugin_session_id() const;
  void _internal_set_plugin_session_id(::int32_t value);
  public:
  // required int32 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::int32_t state() const;
  void set_state(::int32_t value);
  private:
  ::int32_t _internal_state() const;
  void _internal_set_state(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:base.ClientState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t plugin_session_id_;
    ::int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ClientAdminKick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ClientAdminKick) */ {
 public:
  inline ClientAdminKick() : ClientAdminKick(nullptr) {}
  ~ClientAdminKick() override;
  explicit PROTOBUF_CONSTEXPR ClientAdminKick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientAdminKick(const ClientAdminKick& from);
  ClientAdminKick(ClientAdminKick&& from) noexcept
    : ClientAdminKick() {
    *this = ::std::move(from);
  }

  inline ClientAdminKick& operator=(const ClientAdminKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientAdminKick& operator=(ClientAdminKick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientAdminKick& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientAdminKick* internal_default_instance() {
    return reinterpret_cast<const ClientAdminKick*>(
               &_ClientAdminKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientAdminKick& a, ClientAdminKick& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientAdminKick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientAdminKick* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientAdminKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientAdminKick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientAdminKick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientAdminKick& from) {
    ClientAdminKick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientAdminKick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ClientAdminKick";
  }
  protected:
  explicit ClientAdminKick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);
  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:base.ClientAdminKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ServerClientInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ServerClientInfo) */ {
 public:
  inline ServerClientInfo() : ServerClientInfo(nullptr) {}
  ~ServerClientInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerClientInfo(const ServerClientInfo& from);
  ServerClientInfo(ServerClientInfo&& from) noexcept
    : ServerClientInfo() {
    *this = ::std::move(from);
  }

  inline ServerClientInfo& operator=(const ServerClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerClientInfo& operator=(ServerClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerClientInfo* internal_default_instance() {
    return reinterpret_cast<const ServerClientInfo*>(
               &_ServerClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerClientInfo& a, ServerClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerClientInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerClientInfo* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerClientInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerClientInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerClientInfo& from) {
    ServerClientInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerClientInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ServerClientInfo";
  }
  protected:
  explicit ServerClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kIsLocalFieldNumber = 2,
    kIsConnectedFieldNumber = 3,
  };
  // required .base.ClientData data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::base::ClientData& data() const;
  PROTOBUF_NODISCARD ::base::ClientData* release_data();
  ::base::ClientData* mutable_data();
  void set_allocated_data(::base::ClientData* data);
  private:
  const ::base::ClientData& _internal_data() const;
  ::base::ClientData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::base::ClientData* data);
  ::base::ClientData* unsafe_arena_release_data();
  // required bool is_local = 2;
  bool has_is_local() const;
  void clear_is_local() ;
  bool is_local() const;
  void set_is_local(bool value);
  private:
  bool _internal_is_local() const;
  void _internal_set_is_local(bool value);
  public:
  // required bool is_connected = 3;
  bool has_is_connected() const;
  void clear_is_connected() ;
  bool is_connected() const;
  void set_is_connected(bool value);
  private:
  bool _internal_is_connected() const;
  void _internal_set_is_connected(bool value);
  public:
  // @@protoc_insertion_point(class_scope:base.ServerClientInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::base::ClientData* data_;
    bool is_local_;
    bool is_connected_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ServerPlugin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ServerPlugin) */ {
 public:
  inline ServerPlugin() : ServerPlugin(nullptr) {}
  ~ServerPlugin() override;
  explicit PROTOBUF_CONSTEXPR ServerPlugin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPlugin(const ServerPlugin& from);
  ServerPlugin(ServerPlugin&& from) noexcept
    : ServerPlugin() {
    *this = ::std::move(from);
  }

  inline ServerPlugin& operator=(const ServerPlugin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPlugin& operator=(ServerPlugin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPlugin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPlugin* internal_default_instance() {
    return reinterpret_cast<const ServerPlugin*>(
               &_ServerPlugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerPlugin& a, ServerPlugin& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPlugin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPlugin* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPlugin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerPlugin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerPlugin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerPlugin& from) {
    ServerPlugin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPlugin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ServerPlugin";
  }
  protected:
  explicit ServerPlugin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // required .base.PluginData data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::base::PluginData& data() const;
  PROTOBUF_NODISCARD ::base::PluginData* release_data();
  ::base::PluginData* mutable_data();
  void set_allocated_data(::base::PluginData* data);
  private:
  const ::base::PluginData& _internal_data() const;
  ::base::PluginData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::base::PluginData* data);
  ::base::PluginData* unsafe_arena_release_data();
  // @@protoc_insertion_point(class_scope:base.ServerPlugin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::base::PluginData* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ServerSetState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ServerSetState) */ {
 public:
  inline ServerSetState() : ServerSetState(nullptr) {}
  ~ServerSetState() override;
  explicit PROTOBUF_CONSTEXPR ServerSetState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerSetState(const ServerSetState& from);
  ServerSetState(ServerSetState&& from) noexcept
    : ServerSetState() {
    *this = ::std::move(from);
  }

  inline ServerSetState& operator=(const ServerSetState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSetState& operator=(ServerSetState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerSetState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerSetState* internal_default_instance() {
    return reinterpret_cast<const ServerSetState*>(
               &_ServerSetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerSetState& a, ServerSetState& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSetState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerSetState* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerSetState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerSetState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerSetState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerSetState& from) {
    ServerSetState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSetState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ServerSetState";
  }
  protected:
  explicit ServerSetState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional int32 plugin_id = 1;
  bool has_plugin_id() const;
  void clear_plugin_id() ;
  ::int32_t plugin_id() const;
  void set_plugin_id(::int32_t value);
  private:
  ::int32_t _internal_plugin_id() const;
  void _internal_set_plugin_id(::int32_t value);
  public:
  // required int32 state = 2;
  bool has_state() const;
  void clear_state() ;
  ::int32_t state() const;
  void set_state(::int32_t value);
  private:
  ::int32_t _internal_state() const;
  void _internal_set_state(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:base.ServerSetState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t plugin_id_;
    ::int32_t state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ClientLobbyAdminTimer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ClientLobbyAdminTimer) */ {
 public:
  inline ClientLobbyAdminTimer() : ClientLobbyAdminTimer(nullptr) {}
  ~ClientLobbyAdminTimer() override;
  explicit PROTOBUF_CONSTEXPR ClientLobbyAdminTimer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientLobbyAdminTimer(const ClientLobbyAdminTimer& from);
  ClientLobbyAdminTimer(ClientLobbyAdminTimer&& from) noexcept
    : ClientLobbyAdminTimer() {
    *this = ::std::move(from);
  }

  inline ClientLobbyAdminTimer& operator=(const ClientLobbyAdminTimer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientLobbyAdminTimer& operator=(ClientLobbyAdminTimer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientLobbyAdminTimer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientLobbyAdminTimer* internal_default_instance() {
    return reinterpret_cast<const ClientLobbyAdminTimer*>(
               &_ClientLobbyAdminTimer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClientLobbyAdminTimer& a, ClientLobbyAdminTimer& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientLobbyAdminTimer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientLobbyAdminTimer* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientLobbyAdminTimer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientLobbyAdminTimer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientLobbyAdminTimer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientLobbyAdminTimer& from) {
    ClientLobbyAdminTimer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientLobbyAdminTimer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ClientLobbyAdminTimer";
  }
  protected:
  explicit ClientLobbyAdminTimer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // required float time = 1;
  bool has_time() const;
  void clear_time() ;
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:
  // @@protoc_insertion_point(class_scope:base.ClientLobbyAdminTimer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ClientLobbyVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ClientLobbyVote) */ {
 public:
  inline ClientLobbyVote() : ClientLobbyVote(nullptr) {}
  ~ClientLobbyVote() override;
  explicit PROTOBUF_CONSTEXPR ClientLobbyVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientLobbyVote(const ClientLobbyVote& from);
  ClientLobbyVote(ClientLobbyVote&& from) noexcept
    : ClientLobbyVote() {
    *this = ::std::move(from);
  }

  inline ClientLobbyVote& operator=(const ClientLobbyVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientLobbyVote& operator=(ClientLobbyVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientLobbyVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientLobbyVote* internal_default_instance() {
    return reinterpret_cast<const ClientLobbyVote*>(
               &_ClientLobbyVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClientLobbyVote& a, ClientLobbyVote& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientLobbyVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientLobbyVote* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientLobbyVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientLobbyVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientLobbyVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientLobbyVote& from) {
    ClientLobbyVote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientLobbyVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ClientLobbyVote";
  }
  protected:
  explicit ClientLobbyVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginIdFieldNumber = 1,
  };
  // required int32 plugin_id = 1;
  bool has_plugin_id() const;
  void clear_plugin_id() ;
  ::int32_t plugin_id() const;
  void set_plugin_id(::int32_t value);
  private:
  ::int32_t _internal_plugin_id() const;
  void _internal_set_plugin_id(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:base.ClientLobbyVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t plugin_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ServerLobbyTimer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ServerLobbyTimer) */ {
 public:
  inline ServerLobbyTimer() : ServerLobbyTimer(nullptr) {}
  ~ServerLobbyTimer() override;
  explicit PROTOBUF_CONSTEXPR ServerLobbyTimer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerLobbyTimer(const ServerLobbyTimer& from);
  ServerLobbyTimer(ServerLobbyTimer&& from) noexcept
    : ServerLobbyTimer() {
    *this = ::std::move(from);
  }

  inline ServerLobbyTimer& operator=(const ServerLobbyTimer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerLobbyTimer& operator=(ServerLobbyTimer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerLobbyTimer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerLobbyTimer* internal_default_instance() {
    return reinterpret_cast<const ServerLobbyTimer*>(
               &_ServerLobbyTimer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ServerLobbyTimer& a, ServerLobbyTimer& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerLobbyTimer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerLobbyTimer* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerLobbyTimer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerLobbyTimer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerLobbyTimer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerLobbyTimer& from) {
    ServerLobbyTimer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerLobbyTimer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ServerLobbyTimer";
  }
  protected:
  explicit ServerLobbyTimer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // required float time = 1;
  bool has_time() const;
  void clear_time() ;
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:
  // @@protoc_insertion_point(class_scope:base.ServerLobbyTimer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};// -------------------------------------------------------------------

class ServerLobbyVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ServerLobbyVote) */ {
 public:
  inline ServerLobbyVote() : ServerLobbyVote(nullptr) {}
  ~ServerLobbyVote() override;
  explicit PROTOBUF_CONSTEXPR ServerLobbyVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerLobbyVote(const ServerLobbyVote& from);
  ServerLobbyVote(ServerLobbyVote&& from) noexcept
    : ServerLobbyVote() {
    *this = ::std::move(from);
  }

  inline ServerLobbyVote& operator=(const ServerLobbyVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerLobbyVote& operator=(ServerLobbyVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerLobbyVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerLobbyVote* internal_default_instance() {
    return reinterpret_cast<const ServerLobbyVote*>(
               &_ServerLobbyVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ServerLobbyVote& a, ServerLobbyVote& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerLobbyVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerLobbyVote* other) {
    if (other == this) return;
    GOOGLE_ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerLobbyVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerLobbyVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerLobbyVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerLobbyVote& from) {
    ServerLobbyVote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerLobbyVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "base.ServerLobbyVote";
  }
  protected:
  explicit ServerLobbyVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kPluginIdFieldNumber = 2,
  };
  // required int32 client_id = 1;
  bool has_client_id() const;
  void clear_client_id() ;
  ::int32_t client_id() const;
  void set_client_id(::int32_t value);
  private:
  ::int32_t _internal_client_id() const;
  void _internal_set_client_id(::int32_t value);
  public:
  // required int32 plugin_id = 2;
  bool has_plugin_id() const;
  void clear_plugin_id() ;
  ::int32_t plugin_id() const;
  void set_plugin_id(::int32_t value);
  private:
  ::int32_t _internal_plugin_id() const;
  void _internal_set_plugin_id(::int32_t value);
  public:
  // @@protoc_insertion_point(class_scope:base.ServerLobbyVote)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t client_id_;
    ::int32_t plugin_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMessages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientData

// required string name = 1;
inline bool ClientData::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientData::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientData::name() const {
  // @@protoc_insertion_point(field_get:base.ClientData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientData::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:base.ClientData.name)
}
inline std::string* ClientData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:base.ClientData.name)
  return _s;
}
inline const std::string& ClientData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ClientData::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientData::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientData::release_name() {
  // @@protoc_insertion_point(field_release:base.ClientData.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:base.ClientData.name)
}

// required int32 id = 2;
inline bool ClientData::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ClientData::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ClientData::_internal_id() const {
  return _impl_.id_;
}
inline ::int32_t ClientData::id() const {
  // @@protoc_insertion_point(field_get:base.ClientData.id)
  return _internal_id();
}
inline void ClientData::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void ClientData::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:base.ClientData.id)
}

// required bool is_admin = 3;
inline bool ClientData::has_is_admin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ClientData::clear_is_admin() {
  _impl_.is_admin_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ClientData::_internal_is_admin() const {
  return _impl_.is_admin_;
}
inline bool ClientData::is_admin() const {
  // @@protoc_insertion_point(field_get:base.ClientData.is_admin)
  return _internal_is_admin();
}
inline void ClientData::_internal_set_is_admin(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_admin_ = value;
}
inline void ClientData::set_is_admin(bool value) {
  _internal_set_is_admin(value);
  // @@protoc_insertion_point(field_set:base.ClientData.is_admin)
}

// -------------------------------------------------------------------

// PluginData

// required string id = 1;
inline bool PluginData::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PluginData::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginData::id() const {
  // @@protoc_insertion_point(field_get:base.PluginData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PluginData::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:base.PluginData.id)
}
inline std::string* PluginData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:base.PluginData.id)
  return _s;
}
inline const std::string& PluginData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PluginData::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PluginData::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PluginData::release_id() {
  // @@protoc_insertion_point(field_release:base.PluginData.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PluginData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:base.PluginData.id)
}

// required int32 session_id = 2;
inline bool PluginData::has_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PluginData::clear_session_id() {
  _impl_.session_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PluginData::_internal_session_id() const {
  return _impl_.session_id_;
}
inline ::int32_t PluginData::session_id() const {
  // @@protoc_insertion_point(field_get:base.PluginData.session_id)
  return _internal_session_id();
}
inline void PluginData::_internal_set_session_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.session_id_ = value;
}
inline void PluginData::set_session_id(::int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:base.PluginData.session_id)
}

// -------------------------------------------------------------------

// ClientJoin

// required string name = 1;
inline bool ClientJoin::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientJoin::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientJoin::name() const {
  // @@protoc_insertion_point(field_get:base.ClientJoin.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientJoin::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:base.ClientJoin.name)
}
inline std::string* ClientJoin::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:base.ClientJoin.name)
  return _s;
}
inline const std::string& ClientJoin::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ClientJoin::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientJoin::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientJoin::release_name() {
  // @@protoc_insertion_point(field_release:base.ClientJoin.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientJoin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:base.ClientJoin.name)
}

// -------------------------------------------------------------------

// ClientState

// optional int32 plugin_session_id = 1;
inline bool ClientState::has_plugin_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientState::clear_plugin_session_id() {
  _impl_.plugin_session_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ClientState::_internal_plugin_session_id() const {
  return _impl_.plugin_session_id_;
}
inline ::int32_t ClientState::plugin_session_id() const {
  // @@protoc_insertion_point(field_get:base.ClientState.plugin_session_id)
  return _internal_plugin_session_id();
}
inline void ClientState::_internal_set_plugin_session_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.plugin_session_id_ = value;
}
inline void ClientState::set_plugin_session_id(::int32_t value) {
  _internal_set_plugin_session_id(value);
  // @@protoc_insertion_point(field_set:base.ClientState.plugin_session_id)
}

// required int32 state = 2;
inline bool ClientState::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ClientState::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ClientState::_internal_state() const {
  return _impl_.state_;
}
inline ::int32_t ClientState::state() const {
  // @@protoc_insertion_point(field_get:base.ClientState.state)
  return _internal_state();
}
inline void ClientState::_internal_set_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}
inline void ClientState::set_state(::int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:base.ClientState.state)
}

// -------------------------------------------------------------------

// ClientAdminKick

// required int32 id = 1;
inline bool ClientAdminKick::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientAdminKick::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ClientAdminKick::_internal_id() const {
  return _impl_.id_;
}
inline ::int32_t ClientAdminKick::id() const {
  // @@protoc_insertion_point(field_get:base.ClientAdminKick.id)
  return _internal_id();
}
inline void ClientAdminKick::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void ClientAdminKick::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:base.ClientAdminKick.id)
}

// -------------------------------------------------------------------

// ServerClientInfo

// required .base.ClientData data = 1;
inline bool ServerClientInfo::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void ServerClientInfo::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::base::ClientData& ServerClientInfo::_internal_data() const {
  const ::base::ClientData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::ClientData&>(
      ::base::_ClientData_default_instance_);
}
inline const ::base::ClientData& ServerClientInfo::data() const {
  // @@protoc_insertion_point(field_get:base.ServerClientInfo.data)
  return _internal_data();
}
inline void ServerClientInfo::unsafe_arena_set_allocated_data(
    ::base::ClientData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:base.ServerClientInfo.data)
}
inline ::base::ClientData* ServerClientInfo::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::base::ClientData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::ClientData* ServerClientInfo::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:base.ServerClientInfo.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::base::ClientData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::base::ClientData* ServerClientInfo::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::ClientData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::base::ClientData* ServerClientInfo::mutable_data() {
  ::base::ClientData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:base.ServerClientInfo.data)
  return _msg;
}
inline void ServerClientInfo::set_allocated_data(::base::ClientData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:base.ServerClientInfo.data)
}

// required bool is_local = 2;
inline bool ServerClientInfo::has_is_local() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ServerClientInfo::clear_is_local() {
  _impl_.is_local_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ServerClientInfo::_internal_is_local() const {
  return _impl_.is_local_;
}
inline bool ServerClientInfo::is_local() const {
  // @@protoc_insertion_point(field_get:base.ServerClientInfo.is_local)
  return _internal_is_local();
}
inline void ServerClientInfo::_internal_set_is_local(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_local_ = value;
}
inline void ServerClientInfo::set_is_local(bool value) {
  _internal_set_is_local(value);
  // @@protoc_insertion_point(field_set:base.ServerClientInfo.is_local)
}

// required bool is_connected = 3;
inline bool ServerClientInfo::has_is_connected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ServerClientInfo::clear_is_connected() {
  _impl_.is_connected_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ServerClientInfo::_internal_is_connected() const {
  return _impl_.is_connected_;
}
inline bool ServerClientInfo::is_connected() const {
  // @@protoc_insertion_point(field_get:base.ServerClientInfo.is_connected)
  return _internal_is_connected();
}
inline void ServerClientInfo::_internal_set_is_connected(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_connected_ = value;
}
inline void ServerClientInfo::set_is_connected(bool value) {
  _internal_set_is_connected(value);
  // @@protoc_insertion_point(field_set:base.ServerClientInfo.is_connected)
}

// -------------------------------------------------------------------

// ServerPlugin

// required .base.PluginData data = 1;
inline bool ServerPlugin::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void ServerPlugin::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::base::PluginData& ServerPlugin::_internal_data() const {
  const ::base::PluginData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::PluginData&>(
      ::base::_PluginData_default_instance_);
}
inline const ::base::PluginData& ServerPlugin::data() const {
  // @@protoc_insertion_point(field_get:base.ServerPlugin.data)
  return _internal_data();
}
inline void ServerPlugin::unsafe_arena_set_allocated_data(
    ::base::PluginData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:base.ServerPlugin.data)
}
inline ::base::PluginData* ServerPlugin::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::base::PluginData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::PluginData* ServerPlugin::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:base.ServerPlugin.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::base::PluginData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::base::PluginData* ServerPlugin::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::PluginData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::base::PluginData* ServerPlugin::mutable_data() {
  ::base::PluginData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:base.ServerPlugin.data)
  return _msg;
}
inline void ServerPlugin::set_allocated_data(::base::PluginData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:base.ServerPlugin.data)
}

// -------------------------------------------------------------------

// ServerSetState

// optional int32 plugin_id = 1;
inline bool ServerSetState::has_plugin_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerSetState::clear_plugin_id() {
  _impl_.plugin_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ServerSetState::_internal_plugin_id() const {
  return _impl_.plugin_id_;
}
inline ::int32_t ServerSetState::plugin_id() const {
  // @@protoc_insertion_point(field_get:base.ServerSetState.plugin_id)
  return _internal_plugin_id();
}
inline void ServerSetState::_internal_set_plugin_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.plugin_id_ = value;
}
inline void ServerSetState::set_plugin_id(::int32_t value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:base.ServerSetState.plugin_id)
}

// required int32 state = 2;
inline bool ServerSetState::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ServerSetState::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ServerSetState::_internal_state() const {
  return _impl_.state_;
}
inline ::int32_t ServerSetState::state() const {
  // @@protoc_insertion_point(field_get:base.ServerSetState.state)
  return _internal_state();
}
inline void ServerSetState::_internal_set_state(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}
inline void ServerSetState::set_state(::int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:base.ServerSetState.state)
}

// -------------------------------------------------------------------

// ClientLobbyAdminTimer

// required float time = 1;
inline bool ClientLobbyAdminTimer::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientLobbyAdminTimer::clear_time() {
  _impl_.time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ClientLobbyAdminTimer::_internal_time() const {
  return _impl_.time_;
}
inline float ClientLobbyAdminTimer::time() const {
  // @@protoc_insertion_point(field_get:base.ClientLobbyAdminTimer.time)
  return _internal_time();
}
inline void ClientLobbyAdminTimer::_internal_set_time(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}
inline void ClientLobbyAdminTimer::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:base.ClientLobbyAdminTimer.time)
}

// -------------------------------------------------------------------

// ClientLobbyVote

// required int32 plugin_id = 1;
inline bool ClientLobbyVote::has_plugin_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientLobbyVote::clear_plugin_id() {
  _impl_.plugin_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ClientLobbyVote::_internal_plugin_id() const {
  return _impl_.plugin_id_;
}
inline ::int32_t ClientLobbyVote::plugin_id() const {
  // @@protoc_insertion_point(field_get:base.ClientLobbyVote.plugin_id)
  return _internal_plugin_id();
}
inline void ClientLobbyVote::_internal_set_plugin_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.plugin_id_ = value;
}
inline void ClientLobbyVote::set_plugin_id(::int32_t value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:base.ClientLobbyVote.plugin_id)
}

// -------------------------------------------------------------------

// ServerLobbyTimer

// required float time = 1;
inline bool ServerLobbyTimer::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerLobbyTimer::clear_time() {
  _impl_.time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ServerLobbyTimer::_internal_time() const {
  return _impl_.time_;
}
inline float ServerLobbyTimer::time() const {
  // @@protoc_insertion_point(field_get:base.ServerLobbyTimer.time)
  return _internal_time();
}
inline void ServerLobbyTimer::_internal_set_time(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}
inline void ServerLobbyTimer::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:base.ServerLobbyTimer.time)
}

// -------------------------------------------------------------------

// ServerLobbyVote

// required int32 client_id = 1;
inline bool ServerLobbyVote::has_client_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerLobbyVote::clear_client_id() {
  _impl_.client_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ServerLobbyVote::_internal_client_id() const {
  return _impl_.client_id_;
}
inline ::int32_t ServerLobbyVote::client_id() const {
  // @@protoc_insertion_point(field_get:base.ServerLobbyVote.client_id)
  return _internal_client_id();
}
inline void ServerLobbyVote::_internal_set_client_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.client_id_ = value;
}
inline void ServerLobbyVote::set_client_id(::int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:base.ServerLobbyVote.client_id)
}

// required int32 plugin_id = 2;
inline bool ServerLobbyVote::has_plugin_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ServerLobbyVote::clear_plugin_id() {
  _impl_.plugin_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ServerLobbyVote::_internal_plugin_id() const {
  return _impl_.plugin_id_;
}
inline ::int32_t ServerLobbyVote::plugin_id() const {
  // @@protoc_insertion_point(field_get:base.ServerLobbyVote.plugin_id)
  return _internal_plugin_id();
}
inline void ServerLobbyVote::_internal_set_plugin_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plugin_id_ = value;
}
inline void ServerLobbyVote::set_plugin_id(::int32_t value) {
  _internal_set_plugin_id(value);
  // @@protoc_insertion_point(field_set:base.ServerLobbyVote.plugin_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace base


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_BaseMessages_2eproto_2epb_2eh
