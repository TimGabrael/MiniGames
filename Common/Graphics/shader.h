#ifndef GENERATED_SHADER_H
#define GENERATED_SHADER_H

struct Gen_BufferBinding {
    unsigned int buffer;
    unsigned int offset;
};
struct Gen_Uniforms {
	float reflect_projection[16];
	float reflect_view[16];
	float reflect_model[16];
	float reflect_clipPlane[4];
	Gen_BufferBinding reflect__lightData;
	unsigned int reflect_shadowMap;
	unsigned int reflect__my_internalAOMap;
	float reflect_currentFBOSize[2];
	Gen_BufferBinding reflect_material;
	unsigned int reflect_reflectTexture;
	unsigned int reflect_refractTexture;
	unsigned int reflect_dvdu;
	float reflect_geom_projection[16];
	float reflect_geom_view[16];
	float reflect_geom_model[16];
	float reflect_geom_clipPlane[4];
	float ao_screenResolution[2];
	unsigned int ao_gDepthMap;
	unsigned int ao_gRandTex;
	unsigned int blur_tex;
	float blur_blurRadius;
	int blur_axis;
	float blur_texUV[2];
	unsigned int bloom_tex;
	float bloom_blurRadius;
	int bloom_axis;
	float bloom_intensity;
	float bloom_mipLevel;
	unsigned int copy_tex;
	float copy_mipLevel;
	unsigned int dual_copy_tex1;
	unsigned int dual_copy_tex2;
	float dual_copy_mipLevel1;
	float dual_copy_mipLevel2;
	unsigned int upsample_tex;
	float upsample_mipLevel;
	float cubemap_viewProj[16];
	unsigned int cubemap_skybox;
	Gen_BufferBinding pbr_ubo;
	float pbr_model[16];
	float pbr_clipPlane[4];
	Gen_BufferBinding pbr_node;
	Gen_BufferBinding pbr__lightData;
	unsigned int pbr_shadowMap;
	unsigned int pbr__my_internalAOMap;
	float pbr_currentFBOSize[2];
	Gen_BufferBinding pbr_uboParams;
	unsigned int pbr_samplerIrradiance;
	unsigned int pbr_prefilteredMap;
	unsigned int pbr_samplerBRDFLUT;
	unsigned int pbr_colorMap;
	unsigned int pbr_physicalDescriptorMap;
	unsigned int pbr_normalMap;
	unsigned int pbr_aoMap;
	unsigned int pbr_emissiveMap;
	Gen_BufferBinding pbr_material;
	Gen_BufferBinding pbr_geom_ubo;
	float pbr_geom_model[16];
	float pbr_geom_clipPlane[4];
	Gen_BufferBinding pbr_geom_node;
	Gen_BufferBinding pbr_geom_material;
	unsigned int pbr_geom_colorMap;
	float s3d_projection[16];
	float s3d_model[16];
	float s3d_view[16];
	float s3d_clipPlane[4];
	unsigned int s3d_tex;
	float s3d_geom_projection[16];
	float s3d_geom_model[16];
	float s3d_geom_view[16];
	float s3d_geom_clipPlane[4];
	unsigned int ui_tex;
	unsigned int idx_reflect_projection;
	unsigned int idx_reflect_view;
	unsigned int idx_reflect_model;
	unsigned int idx_reflect_clipPlane;
	unsigned int idx_reflect__lightData;
	unsigned int idx_reflect_currentFBOSize;
	unsigned int idx_reflect_material;
	unsigned char reflect_has_val[2];
	unsigned int idx_reflect_geom_projection;
	unsigned int idx_reflect_geom_view;
	unsigned int idx_reflect_geom_model;
	unsigned int idx_reflect_geom_clipPlane;
	unsigned char reflect_geom_has_val[1];
	unsigned int idx_ao_screenResolution;
	unsigned char ao_has_val[1];
	unsigned int idx_blur_blurRadius;
	unsigned int idx_blur_axis;
	unsigned int idx_blur_texUV;
	unsigned char blur_has_val[1];
	unsigned int idx_bloom_blurRadius;
	unsigned int idx_bloom_axis;
	unsigned int idx_bloom_intensity;
	unsigned int idx_bloom_mipLevel;
	unsigned char bloom_has_val[1];
	unsigned int idx_copy_mipLevel;
	unsigned char copy_has_val[1];
	unsigned int idx_dual_copy_mipLevel1;
	unsigned int idx_dual_copy_mipLevel2;
	unsigned char dual_copy_has_val[1];
	unsigned int idx_upsample_mipLevel;
	unsigned char upsample_has_val[1];
	unsigned int idx_cubemap_viewProj;
	unsigned char cubemap_has_val[1];
	unsigned int idx_pbr_ubo;
	unsigned int idx_pbr_model;
	unsigned int idx_pbr_clipPlane;
	unsigned int idx_pbr_node;
	unsigned int idx_pbr__lightData;
	unsigned int idx_pbr_currentFBOSize;
	unsigned int idx_pbr_uboParams;
	unsigned int idx_pbr_material;
	unsigned char pbr_has_val[3];
	unsigned int idx_pbr_geom_ubo;
	unsigned int idx_pbr_geom_model;
	unsigned int idx_pbr_geom_clipPlane;
	unsigned int idx_pbr_geom_node;
	unsigned int idx_pbr_geom_material;
	unsigned char pbr_geom_has_val[1];
	unsigned int idx_s3d_projection;
	unsigned int idx_s3d_model;
	unsigned int idx_s3d_view;
	unsigned int idx_s3d_clipPlane;
	unsigned char s3d_has_val[1];
	unsigned int idx_s3d_geom_projection;
	unsigned int idx_s3d_geom_model;
	unsigned int idx_s3d_geom_view;
	unsigned int idx_s3d_geom_clipPlane;
	unsigned char s3d_geom_has_val[1];
	unsigned char ui_has_val[1];
};
struct Shader {
	struct Gen_Uniforms _internal_uniforms;
	unsigned int reflect;
	unsigned int reflect_geom;
	unsigned int ao;
	unsigned int blur;
	unsigned int bloom;
	unsigned int copy;
	unsigned int dual_copy;
	unsigned int upsample;
	unsigned int cubemap;
	unsigned int pbr;
	unsigned int pbr_geom;
	unsigned int s3d;
	unsigned int s3d_geom;
	unsigned int ui;
};


void SH_Create(struct Shader* out);
void SH_CleanUp(struct Shader* sh);
void SH_Reset(struct Shader* sh);
void SHB_reflect_projection(struct Shader* sh, float vals[16]);
void SHB_reflect_view(struct Shader* sh, float vals[16]);
void SHB_reflect_model(struct Shader* sh, float vals[16]);
void SHB_reflect_clipPlane(struct Shader* sh, float vals[4]);
void SHB_reflect__lightData(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_reflect_shadowMap(struct Shader* sh, unsigned int tex);
void SHB_reflect__my_internalAOMap(struct Shader* sh, unsigned int tex);
void SHB_reflect_currentFBOSize(struct Shader* sh, float vals[2]);
void SHB_reflect_material(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_reflect_reflectTexture(struct Shader* sh, unsigned int tex);
void SHB_reflect_refractTexture(struct Shader* sh, unsigned int tex);
void SHB_reflect_dvdu(struct Shader* sh, unsigned int tex);
void SHB_reflect_geom_projection(struct Shader* sh, float vals[16]);
void SHB_reflect_geom_view(struct Shader* sh, float vals[16]);
void SHB_reflect_geom_model(struct Shader* sh, float vals[16]);
void SHB_reflect_geom_clipPlane(struct Shader* sh, float vals[4]);
void SHB_ao_screenResolution(struct Shader* sh, float vals[2]);
void SHB_ao_gDepthMap(struct Shader* sh, unsigned int tex);
void SHB_ao_gRandTex(struct Shader* sh, unsigned int tex);
void SHB_blur_tex(struct Shader* sh, unsigned int tex);
void SHB_blur_blurRadius(struct Shader* sh, float val);
void SHB_blur_axis(struct Shader* sh, int val);
void SHB_blur_texUV(struct Shader* sh, float vals[2]);
void SHB_bloom_tex(struct Shader* sh, unsigned int tex);
void SHB_bloom_blurRadius(struct Shader* sh, float val);
void SHB_bloom_axis(struct Shader* sh, int val);
void SHB_bloom_intensity(struct Shader* sh, float val);
void SHB_bloom_mipLevel(struct Shader* sh, float val);
void SHB_copy_tex(struct Shader* sh, unsigned int tex);
void SHB_copy_mipLevel(struct Shader* sh, float val);
void SHB_dual_copy_tex1(struct Shader* sh, unsigned int tex);
void SHB_dual_copy_tex2(struct Shader* sh, unsigned int tex);
void SHB_dual_copy_mipLevel1(struct Shader* sh, float val);
void SHB_dual_copy_mipLevel2(struct Shader* sh, float val);
void SHB_upsample_tex(struct Shader* sh, unsigned int tex);
void SHB_upsample_mipLevel(struct Shader* sh, float val);
void SHB_cubemap_viewProj(struct Shader* sh, float vals[16]);
void SHB_cubemap_skybox(struct Shader* sh, unsigned int tex);
void SHB_pbr_ubo(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_pbr_model(struct Shader* sh, float vals[16]);
void SHB_pbr_clipPlane(struct Shader* sh, float vals[4]);
void SHB_pbr_node(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_pbr__lightData(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_pbr_shadowMap(struct Shader* sh, unsigned int tex);
void SHB_pbr__my_internalAOMap(struct Shader* sh, unsigned int tex);
void SHB_pbr_currentFBOSize(struct Shader* sh, float vals[2]);
void SHB_pbr_uboParams(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_pbr_samplerIrradiance(struct Shader* sh, unsigned int tex);
void SHB_pbr_prefilteredMap(struct Shader* sh, unsigned int tex);
void SHB_pbr_samplerBRDFLUT(struct Shader* sh, unsigned int tex);
void SHB_pbr_colorMap(struct Shader* sh, unsigned int tex);
void SHB_pbr_physicalDescriptorMap(struct Shader* sh, unsigned int tex);
void SHB_pbr_normalMap(struct Shader* sh, unsigned int tex);
void SHB_pbr_aoMap(struct Shader* sh, unsigned int tex);
void SHB_pbr_emissiveMap(struct Shader* sh, unsigned int tex);
void SHB_pbr_material(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_pbr_geom_ubo(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_pbr_geom_model(struct Shader* sh, float vals[16]);
void SHB_pbr_geom_clipPlane(struct Shader* sh, float vals[4]);
void SHB_pbr_geom_node(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_pbr_geom_material(struct Shader* sh, unsigned int buf, unsigned int offset, size_t sz);
void SHB_pbr_geom_colorMap(struct Shader* sh, unsigned int tex);
void SHB_s3d_projection(struct Shader* sh, float vals[16]);
void SHB_s3d_model(struct Shader* sh, float vals[16]);
void SHB_s3d_view(struct Shader* sh, float vals[16]);
void SHB_s3d_clipPlane(struct Shader* sh, float vals[4]);
void SHB_s3d_tex(struct Shader* sh, unsigned int tex);
void SHB_s3d_geom_projection(struct Shader* sh, float vals[16]);
void SHB_s3d_geom_model(struct Shader* sh, float vals[16]);
void SHB_s3d_geom_view(struct Shader* sh, float vals[16]);
void SHB_s3d_geom_clipPlane(struct Shader* sh, float vals[4]);
void SHB_ui_tex(struct Shader* sh, unsigned int tex);


#endif // GENERATED_SHADER_H
